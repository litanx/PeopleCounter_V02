
PC_Proto_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef4  08005ef4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000084  08005f80  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005f80  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114e0  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023f4  00000000  00000000  00031594  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00033988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  000347a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f22  00000000  00000000  000354a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bcd4  00000000  00000000  000573c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4367  00000000  00000000  00063096  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001273fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  00127478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d6c 	.word	0x08005d6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005d6c 	.word	0x08005d6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f001 fa5e 	bl	8002210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f836 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f000 f902 	bl	8000f60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d5c:	f000 f890 	bl	8000e80 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000d60:	f000 f8ce 	bl	8000f00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DoorSensor_Init();
 8000d64:	f000 fb3e 	bl	80013e4 <DoorSensor_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  DoorSensor_Tasks();
 8000d68:	f000 fbb0 	bl	80014cc <DoorSensor_Tasks>

		static int32_t prevCounter = 0;

		if(prevCounter != PplCounter){
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <main+0x64>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <main+0x68>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <main+0x6c>)
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d0f4      	beq.n	8000d68 <main+0x1c>

			printf("AT+CNTR=%d,%d,%d\n\r",PplCounter, PplEntry, PplExit);
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <main+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <main+0x68>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	1ad1      	subs	r1, r2, r3
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <main+0x64>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <main+0x68>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	480a      	ldr	r0, [pc, #40]	; (8000dbc <main+0x70>)
 8000d92:	f004 f907 	bl	8004fa4 <iprintf>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000d96:	2108      	movs	r1, #8
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <main+0x74>)
 8000d9a:	f001 fd33 	bl	8002804 <HAL_GPIO_TogglePin>
			prevCounter = PplCounter;
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <main+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <main+0x68>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <main+0x6c>)
 8000dac:	601a      	str	r2, [r3, #0]
  {
 8000dae:	e7db      	b.n	8000d68 <main+0x1c>
 8000db0:	200000a8 	.word	0x200000a8
 8000db4:	200000ac 	.word	0x200000ac
 8000db8:	200000a0 	.word	0x200000a0
 8000dbc:	08005d84 	.word	0x08005d84
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ac      	sub	sp, #176	; 0xb0
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dce:	2244      	movs	r2, #68	; 0x44
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f8de 	bl	8004f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2254      	movs	r2, #84	; 0x54
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 f8d0 	bl	8004f94 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df4:	2302      	movs	r3, #2
 8000df6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 fa67 	bl	80032e0 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e18:	f000 f912 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e20:	2301      	movs	r3, #1
 8000e22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fe72 	bl	8003b20 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e42:	f000 f8fd 	bl	8001040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000e46:	2342      	movs	r3, #66	; 0x42
 8000e48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 f867 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000e60:	f000 f8ee 	bl	8001040 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e68:	f002 f9e4 	bl	8003234 <HAL_PWREx_ControlVoltageScaling>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e72:	f000 f8e5 	bl	8001040 <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	37b0      	adds	r7, #176	; 0xb0
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <MX_I2C1_Init+0x78>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <MX_I2C1_Init+0x7c>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000ebc:	f001 fcbb 	bl	8002836 <HAL_I2C_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ec6:	f000 f8bb 	bl	8001040 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000ece:	f002 f90b 	bl	80030e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 f8b2 	bl	8001040 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000ee0:	f002 f94d 	bl	800317e <HAL_I2CEx_ConfigDigitalFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 f8a9 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000e0 	.word	0x200000e0
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	00303d5b 	.word	0x00303d5b

08000f00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <MX_USART2_UART_Init+0x5c>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_USART2_UART_Init+0x58>)
 8000f44:	f003 fad2 	bl	80044ec <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 f877 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2000012c 	.word	0x2000012c
 8000f5c:	40004400 	.word	0x40004400

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_GPIO_Init+0x74>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <MX_GPIO_Init+0x74>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_GPIO_Init+0x74>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_GPIO_Init+0x74>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <MX_GPIO_Init+0x74>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_GPIO_Init+0x74>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <MX_GPIO_Init+0x78>)
 8000fac:	f001 fc12 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_GPIO_Init+0x78>)
 8000fc8:	f001 fa9a 	bl	8002500 <HAL_GPIO_Init>

}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400

08000fdc <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8000fea:	f107 010c 	add.w	r1, r7, #12
 8000fee:	230a      	movs	r3, #10
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <__io_putchar+0x28>)
 8000ff4:	f003 fac8 	bl	8004588 <HAL_UART_Transmit>
 return ch;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000012c 	.word	0x2000012c

08001008 <_write>:

int _write(int file,char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e009      	b.n	800102e <_write+0x26>
 {
 __io_putchar(*ptr++);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	60ba      	str	r2, [r7, #8]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ffda 	bl	8000fdc <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	dbf1      	blt.n	800101a <_write+0x12>
 }
return len;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_MspInit+0x44>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_MspInit+0x44>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6613      	str	r3, [r2, #96]	; 0x60
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_MspInit+0x44>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_MspInit+0x44>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x44>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x44>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_I2C_MspInit+0x80>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d129      	bne.n	800110e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_I2C_MspInit+0x84>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <HAL_I2C_MspInit+0x84>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_I2C_MspInit+0x84>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e4:	2304      	movs	r3, #4
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f001 fa05 	bl	8002500 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_I2C_MspInit+0x84>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_I2C_MspInit+0x84>)
 80010fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_I2C_MspInit+0x84>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40005400 	.word	0x40005400
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_UART_MspInit+0x7c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d128      	bne.n	8001194 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x80>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_UART_MspInit+0x80>)
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	6593      	str	r3, [r2, #88]	; 0x58
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_UART_MspInit+0x80>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_UART_MspInit+0x80>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_UART_MspInit+0x80>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_UART_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001172:	230c      	movs	r3, #12
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001182:	2307      	movs	r3, #7
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f001 f9b6 	bl	8002500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40004400 	.word	0x40004400
 80011a0:	40021000 	.word	0x40021000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f001 f85c 	bl	80022b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e00a      	b.n	8001228 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001212:	f3af 8000 	nop.w
 8001216:	4601      	mov	r1, r0
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	b2ca      	uxtb	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	dbf0      	blt.n	8001212 <_read+0x12>
	}

return len;
 8001230:	687b      	ldr	r3, [r7, #4]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <_close>:
	}
	return len;
}

int _close(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	605a      	str	r2, [r3, #4]
	return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_isatty>:

int _isatty(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
	return 1;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x50>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x16>
		heap_end = &end;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_sbrk+0x50>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_sbrk+0x54>)
 80012b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <_sbrk+0x50>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <_sbrk+0x50>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	466a      	mov	r2, sp
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d907      	bls.n	80012de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012ce:	f003 fe37 	bl	8004f40 <__errno>
 80012d2:	4602      	mov	r2, r0
 80012d4:	230c      	movs	r3, #12
 80012d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	e006      	b.n	80012ec <_sbrk+0x48>
	}

	heap_end += incr;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <_sbrk+0x50>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a03      	ldr	r2, [pc, #12]	; (80012f4 <_sbrk+0x50>)
 80012e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	200002c0 	.word	0x200002c0

080012fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <SystemInit+0x64>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <SystemInit+0x64>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <SystemInit+0x68>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <SystemInit+0x68>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <SystemInit+0x68>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <SystemInit+0x68>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <SystemInit+0x68>)
 8001328:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800132c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001330:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <SystemInit+0x68>)
 8001334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001338:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <SystemInit+0x68>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <SystemInit+0x68>)
 8001340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <SystemInit+0x68>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SystemInit+0x64>)
 800134e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001352:	609a      	str	r2, [r3, #8]
#endif
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00
 8001364:	40021000 	.word	0x40021000

08001368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800136c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800136e:	e003      	b.n	8001378 <LoopCopyDataInit>

08001370 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001372:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001374:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001376:	3104      	adds	r1, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800137c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800137e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001380:	d3f6      	bcc.n	8001370 <CopyDataInit>
	ldr	r2, =_sbss
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001384:	e002      	b.n	800138c <LoopFillZerobss>

08001386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001386:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001388:	f842 3b04 	str.w	r3, [r2], #4

0800138c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <LoopForever+0x16>)
	cmp	r2, r3
 800138e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001390:	d3f9      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001392:	f7ff ffb3 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f003 fdd9 	bl	8004f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139a:	f7ff fcd7 	bl	8000d4c <main>

0800139e <LoopForever>:

LoopForever:
    b LoopForever
 800139e:	e7fe      	b.n	800139e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80013a4:	08005efc 	.word	0x08005efc
	ldr	r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013ac:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80013b0:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80013b4:	200002bc 	.word	0x200002bc

080013b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_IRQHandler>
	...

080013bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013c0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <__NVIC_SystemReset+0x20>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013cc:	4903      	ldr	r1, [pc, #12]	; (80013dc <__NVIC_SystemReset+0x20>)
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_SystemReset+0x24>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60cb      	str	r3, [r1, #12]
 80013d4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <__NVIC_SystemReset+0x1c>
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0004 	.word	0x05fa0004

080013e4 <DoorSensor_Init>:


  static int ProcessPeopleCountingData(int16_t Distance, uint8_t zone);


  void DoorSensor_Init(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

		uint32_t tickStart = HAL_GetTick();
 80013ea:	f000 ff75 	bl	80022d8 <HAL_GetTick>
 80013ee:	6078      	str	r0, [r7, #4]

	  while (sensorState == 0) {
 80013f0:	e017      	b.n	8001422 <DoorSensor_Init+0x3e>
		  status = VL53L1X_BootState(dev, &sensorState);
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <DoorSensor_Init+0xdc>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	4933      	ldr	r1, [pc, #204]	; (80014c4 <DoorSensor_Init+0xe0>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fcf5 	bl	8001de8 <VL53L1X_BootState>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <DoorSensor_Init+0xe4>)
 8001404:	601a      	str	r2, [r3, #0]
		  HAL_Delay(2);
 8001406:	2002      	movs	r0, #2
 8001408:	f000 ff72 	bl	80022f0 <HAL_Delay>

		  if(HAL_GetTick() - tickStart > 1000){
 800140c:	f000 ff64 	bl	80022d8 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141a:	d902      	bls.n	8001422 <DoorSensor_Init+0x3e>
				/* Error -> Reset STM32 */
			  asm("NOP");
 800141c:	bf00      	nop
			  NVIC_SystemReset();
 800141e:	f7ff ffcd 	bl	80013bc <__NVIC_SystemReset>
	  while (sensorState == 0) {
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <DoorSensor_Init+0xe0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0e3      	beq.n	80013f2 <DoorSensor_Init+0xe>
		  }
	  }

	  /* Initialize and configure the device according to people counting need */
	  status = VL53L1X_SensorInit(dev);
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <DoorSensor_Init+0xdc>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f980 	bl	8001734 <VL53L1X_SensorInit>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <DoorSensor_Init+0xe4>)
 800143a:	601a      	str	r2, [r3, #0]
	  status += VL53L1X_SetDistanceMode(dev, 2); /* 1=short, 2=long */
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <DoorSensor_Init+0xdc>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	2102      	movs	r1, #2
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fbd7 	bl	8001bf6 <VL53L1X_SetDistanceMode>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <DoorSensor_Init+0xe4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4413      	add	r3, r2
 8001452:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <DoorSensor_Init+0xe4>)
 8001454:	6013      	str	r3, [r2, #0]
	  status += VL53L1X_SetTimingBudgetInMs(dev, 20); /* in ms possible values [20, 50, 100, 200, 500] */
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <DoorSensor_Init+0xdc>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	2114      	movs	r1, #20
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fa58 	bl	8001912 <VL53L1X_SetTimingBudgetInMs>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <DoorSensor_Init+0xe4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <DoorSensor_Init+0xe4>)
 800146e:	6013      	str	r3, [r2, #0]
	  status += VL53L1X_SetInterMeasurementInMs(dev, 20);
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <DoorSensor_Init+0xdc>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	2114      	movs	r1, #20
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fc7a 	bl	8001d70 <VL53L1X_SetInterMeasurementInMs>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <DoorSensor_Init+0xe4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4413      	add	r3, r2
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <DoorSensor_Init+0xe4>)
 8001488:	6013      	str	r3, [r2, #0]
	  status += VL53L1X_SetROI(dev, 8, 16); /* minimum ROI 4,4 */
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <DoorSensor_Init+0xdc>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	2210      	movs	r2, #16
 8001490:	2108      	movs	r1, #8
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fd20 	bl	8001ed8 <VL53L1X_SetROI>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <DoorSensor_Init+0xe4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <DoorSensor_Init+0xe4>)
 80014a4:	6013      	str	r3, [r2, #0]
	  if (status != 0) {
		  //printf("Error in Initialization or configuration of the device\n");
	  }

	  status = VL53L1X_StartRanging(dev);   /* This function has to be called to enable the ranging */
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <DoorSensor_Init+0xdc>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f9d6 	bl	800185c <VL53L1X_StartRanging>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <DoorSensor_Init+0xe4>)
 80014b6:	601a      	str	r2, [r3, #0]
  }
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000008 	.word	0x20000008
 80014c4:	200000b8 	.word	0x200000b8
 80014c8:	200000b4 	.word	0x200000b4

080014cc <DoorSensor_Tasks>:

void DoorSensor_Tasks(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

	uint32_t tickStart = HAL_GetTick();
 80014d2:	f000 ff01 	bl	80022d8 <HAL_GetTick>
 80014d6:	6078      	str	r0, [r7, #4]

	while (dataReady == 0) {
 80014d8:	e016      	b.n	8001508 <DoorSensor_Tasks+0x3c>
		status = VL53L1X_CheckForDataReady(dev, &dataReady);
 80014da:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <DoorSensor_Tasks+0x100>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	493c      	ldr	r1, [pc, #240]	; (80015d0 <DoorSensor_Tasks+0x104>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f9e5 	bl	80018b0 <VL53L1X_CheckForDataReady>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <DoorSensor_Tasks+0x108>)
 80014ec:	601a      	str	r2, [r3, #0]
		HAL_Delay(2);
 80014ee:	2002      	movs	r0, #2
 80014f0:	f000 fefe 	bl	80022f0 <HAL_Delay>

		if(HAL_GetTick() - tickStart > 1000){
 80014f4:	f000 fef0 	bl	80022d8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001502:	d901      	bls.n	8001508 <DoorSensor_Tasks+0x3c>
			DoorSensor_Init();
 8001504:	f7ff ff6e 	bl	80013e4 <DoorSensor_Init>
	while (dataReady == 0) {
 8001508:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <DoorSensor_Tasks+0x104>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0e4      	beq.n	80014da <DoorSensor_Tasks+0xe>
		}
	}

	dataReady = 0;
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <DoorSensor_Tasks+0x104>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
	status += VL53L1X_GetRangeStatus(dev, &RangeStatus);
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <DoorSensor_Tasks+0x100>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	492f      	ldr	r1, [pc, #188]	; (80015d8 <DoorSensor_Tasks+0x10c>)
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fc99 	bl	8001e54 <VL53L1X_GetRangeStatus>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <DoorSensor_Tasks+0x108>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a29      	ldr	r2, [pc, #164]	; (80015d4 <DoorSensor_Tasks+0x108>)
 800152e:	6013      	str	r3, [r2, #0]
	status += VL53L1X_GetDistance(dev, &Distance);
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <DoorSensor_Tasks+0x100>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	4929      	ldr	r1, [pc, #164]	; (80015dc <DoorSensor_Tasks+0x110>)
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fc72 	bl	8001e20 <VL53L1X_GetDistance>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <DoorSensor_Tasks+0x108>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4413      	add	r3, r2
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <DoorSensor_Tasks+0x108>)
 8001548:	6013      	str	r3, [r2, #0]
	status += VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt */
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <DoorSensor_Tasks+0x100>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f948 	bl	80017e4 <VL53L1X_ClearInterrupt>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <DoorSensor_Tasks+0x108>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4413      	add	r3, r2
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <DoorSensor_Tasks+0x108>)
 8001560:	6013      	str	r3, [r2, #0]
	}

	// wait a couple of milliseconds to ensure the setting of the new ROI center for the next ranging is effective
	// otherwise there is a risk that this setting is applied to current ranging (even if timing has expired, the intermeasurement
	// may expire immediately after.
	HAL_Delay(10);
 8001562:	200a      	movs	r0, #10
 8001564:	f000 fec4 	bl	80022f0 <HAL_Delay>
	status = VL53L1X_SetROICenter(dev, center[Zone]);
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <DoorSensor_Tasks+0x100>)
 800156a:	8818      	ldrh	r0, [r3, #0]
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <DoorSensor_Tasks+0x114>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <DoorSensor_Tasks+0x118>)
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4619      	mov	r1, r3
 800157a:	f000 fc95 	bl	8001ea8 <VL53L1X_SetROICenter>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <DoorSensor_Tasks+0x108>)
 8001584:	601a      	str	r2, [r3, #0]
	if (status != 0) {
		//printf("Error in chaning the center of the ROI\n");
	}

	// inject the new ranged distance in the people counting algorithm
	ProcessPeopleCountingData(Distance, Zone);
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <DoorSensor_Tasks+0x110>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <DoorSensor_Tasks+0x114>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	4610      	mov	r0, r2
 8001596:	f000 f829 	bl	80015ec <ProcessPeopleCountingData>

	Dist[Zone] = Distance;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <DoorSensor_Tasks+0x114>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <DoorSensor_Tasks+0x110>)
 80015a0:	8811      	ldrh	r1, [r2, #0]
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <DoorSensor_Tasks+0x11c>)
 80015a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	Zone++;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <DoorSensor_Tasks+0x114>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <DoorSensor_Tasks+0x114>)
 80015b0:	6013      	str	r3, [r2, #0]
	Zone = Zone%2;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <DoorSensor_Tasks+0x114>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	bfb8      	it	lt
 80015be:	425b      	neglt	r3, r3
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <DoorSensor_Tasks+0x114>)
 80015c2:	6013      	str	r3, [r2, #0]


}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200001b2 	.word	0x200001b2
 80015d4:	200000b4 	.word	0x200000b4
 80015d8:	200001b3 	.word	0x200001b3
 80015dc:	200001ac 	.word	0x200001ac
 80015e0:	200000bc 	.word	0x200000bc
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	200000b0 	.word	0x200000b0

080015ec <ProcessPeopleCountingData>:



static int ProcessPeopleCountingData(int16_t Distance, uint8_t zone) {
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	80fb      	strh	r3, [r7, #6]
 80015f8:	4613      	mov	r3, r2
 80015fa:	717b      	strb	r3, [r7, #5]
    static int PathTrack[] = {0,0,0,0};
    static int PathTrackFillingSize = 1; // init this to 1 as we start from state where nobody is any of the zones
    static int LeftPreviousStatus = NOBODY;
    static int RightPreviousStatus = NOBODY;

    int CurrentZoneStatus = NOBODY;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
    int AllZonesCurrentStatus = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
    int AnEventHasOccured = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]

	if (Distance < DIST_THRESHOLD_MAX) {
 8001608:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <ProcessPeopleCountingData+0x12c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	da01      	bge.n	8001618 <ProcessPeopleCountingData+0x2c>
		// Someone is in !
		CurrentZoneStatus = SOMEONE;
 8001614:	2301      	movs	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
	}

	// left zone
	if (zone == LEFT) {
 8001618:	797b      	ldrb	r3, [r7, #5]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d117      	bne.n	800164e <ProcessPeopleCountingData+0x62>

		if (CurrentZoneStatus != LeftPreviousStatus) {
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <ProcessPeopleCountingData+0x130>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	429a      	cmp	r2, r3
 8001626:	d029      	beq.n	800167c <ProcessPeopleCountingData+0x90>
			// event in left zone has occured
			AnEventHasOccured = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]

			if (CurrentZoneStatus == SOMEONE) {
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <ProcessPeopleCountingData+0x4c>
				AllZonesCurrentStatus += 1;
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	3301      	adds	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
			}
			// need to check right zone as well ...
			if (RightPreviousStatus == SOMEONE) {
 8001638:	4b39      	ldr	r3, [pc, #228]	; (8001720 <ProcessPeopleCountingData+0x134>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d102      	bne.n	8001646 <ProcessPeopleCountingData+0x5a>
				// event in left zone has occured
				AllZonesCurrentStatus += 2;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3302      	adds	r3, #2
 8001644:	613b      	str	r3, [r7, #16]
			}
			// remember for next time
			LeftPreviousStatus = CurrentZoneStatus;
 8001646:	4a35      	ldr	r2, [pc, #212]	; (800171c <ProcessPeopleCountingData+0x130>)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e016      	b.n	800167c <ProcessPeopleCountingData+0x90>
		}
	}
	// right zone
	else {

		if (CurrentZoneStatus != RightPreviousStatus) {
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <ProcessPeopleCountingData+0x134>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	d011      	beq.n	800167c <ProcessPeopleCountingData+0x90>

			// event in left zone has occured
			AnEventHasOccured = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
			if (CurrentZoneStatus == SOMEONE) {
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <ProcessPeopleCountingData+0x7c>
				AllZonesCurrentStatus += 2;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	3302      	adds	r3, #2
 8001666:	613b      	str	r3, [r7, #16]
			}
			// need to left right zone as well ...
			if (LeftPreviousStatus == SOMEONE) {
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <ProcessPeopleCountingData+0x130>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d102      	bne.n	8001676 <ProcessPeopleCountingData+0x8a>
				// event in left zone has occured
				AllZonesCurrentStatus += 1;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	3301      	adds	r3, #1
 8001674:	613b      	str	r3, [r7, #16]
			}
			// remember for next time
			RightPreviousStatus = CurrentZoneStatus;
 8001676:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <ProcessPeopleCountingData+0x134>)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	6013      	str	r3, [r2, #0]
		}
	}

	// if an event has occured
	if (AnEventHasOccured) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d042      	beq.n	8001708 <ProcessPeopleCountingData+0x11c>
		if (PathTrackFillingSize < 4) {
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <ProcessPeopleCountingData+0x138>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b03      	cmp	r3, #3
 8001688:	dc04      	bgt.n	8001694 <ProcessPeopleCountingData+0xa8>
			PathTrackFillingSize ++;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <ProcessPeopleCountingData+0x138>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a24      	ldr	r2, [pc, #144]	; (8001724 <ProcessPeopleCountingData+0x138>)
 8001692:	6013      	str	r3, [r2, #0]
		}

		// if nobody anywhere lets check if an exit or entry has happened
		if ((LeftPreviousStatus == NOBODY) && (RightPreviousStatus == NOBODY)) {
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <ProcessPeopleCountingData+0x130>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12e      	bne.n	80016fa <ProcessPeopleCountingData+0x10e>
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <ProcessPeopleCountingData+0x134>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d12a      	bne.n	80016fa <ProcessPeopleCountingData+0x10e>

			// check exit or entry only if PathTrackFillingSize is 4 (for example 0 1 3 2) and last event is 0 (nobobdy anywhere)
			if (PathTrackFillingSize == 4) {
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <ProcessPeopleCountingData+0x138>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d122      	bne.n	80016f2 <ProcessPeopleCountingData+0x106>
				// check exit or entry. no need to check PathTrack[0] == 0 , it is always the case

				if ((PathTrack[1] == 1)  && (PathTrack[2] == 3) && (PathTrack[3] == 2)) {
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <ProcessPeopleCountingData+0x13c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10d      	bne.n	80016d0 <ProcessPeopleCountingData+0xe4>
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <ProcessPeopleCountingData+0x13c>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d109      	bne.n	80016d0 <ProcessPeopleCountingData+0xe4>
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <ProcessPeopleCountingData+0x13c>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d105      	bne.n	80016d0 <ProcessPeopleCountingData+0xe4>
					// This an entry
					PplEntry++;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <ProcessPeopleCountingData+0x140>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <ProcessPeopleCountingData+0x140>)
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e010      	b.n	80016f2 <ProcessPeopleCountingData+0x106>


				} else if ((PathTrack[1] == 2)  && (PathTrack[2] == 3) && (PathTrack[3] == 1)) {
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <ProcessPeopleCountingData+0x13c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d10c      	bne.n	80016f2 <ProcessPeopleCountingData+0x106>
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <ProcessPeopleCountingData+0x13c>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d108      	bne.n	80016f2 <ProcessPeopleCountingData+0x106>
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <ProcessPeopleCountingData+0x13c>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d104      	bne.n	80016f2 <ProcessPeopleCountingData+0x106>
					// This an exit
					PplExit++;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <ProcessPeopleCountingData+0x144>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <ProcessPeopleCountingData+0x144>)
 80016f0:	6013      	str	r3, [r2, #0]

				}
			}

			PathTrackFillingSize = 1;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <ProcessPeopleCountingData+0x138>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e006      	b.n	8001708 <ProcessPeopleCountingData+0x11c>
			// 0 1
			// 0 1 3
			// 0 1 3 1
			// 0 1 3 3
			// 0 1 3 2 ==> if next is 0 : check if exit
			PathTrack[PathTrackFillingSize-1] = AllZonesCurrentStatus;
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <ProcessPeopleCountingData+0x138>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	4909      	ldr	r1, [pc, #36]	; (8001728 <ProcessPeopleCountingData+0x13c>)
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}

	// output debug data to main host machine
	return(0);
 8001708:	2300      	movs	r3, #0

}
 800170a:	4618      	mov	r0, r3
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000004 	.word	0x20000004
 800171c:	200000c0 	.word	0x200000c0
 8001720:	200000c4 	.word	0x200000c4
 8001724:	20000014 	.word	0x20000014
 8001728:	200000c8 	.word	0x200000c8
 800172c:	200000a8 	.word	0x200000a8
 8001730:	200000ac 	.word	0x200000ac

08001734 <VL53L1X_SensorInit>:
	status = VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	73bb      	strb	r3, [r7, #14]
	uint8_t Addr = 0x00, tmp;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8001746:	232d      	movs	r3, #45	; 0x2d
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e00e      	b.n	800176a <VL53L1X_SensorInit+0x36>
		status = VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	b299      	uxth	r1, r3
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	3b2d      	subs	r3, #45	; 0x2d
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <VL53L1X_SensorInit+0xac>)
 8001756:	5cd2      	ldrb	r2, [r2, r3]
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fc42 	bl	8001fe4 <VL53L1_WrByte>
 8001760:	4603      	mov	r3, r0
 8001762:	73bb      	strb	r3, [r7, #14]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	3301      	adds	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b87      	cmp	r3, #135	; 0x87
 800176e:	d9ed      	bls.n	800174c <VL53L1X_SensorInit+0x18>
	}
	status = VL53L1X_StartRanging(dev);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f872 	bl	800185c <VL53L1X_StartRanging>
 8001778:	4603      	mov	r3, r0
 800177a:	73bb      	strb	r3, [r7, #14]
	tmp  = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8001780:	e008      	b.n	8001794 <VL53L1X_SensorInit+0x60>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8001782:	f107 020d 	add.w	r2, r7, #13
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f890 	bl	80018b0 <VL53L1X_CheckForDataReady>
 8001790:	4603      	mov	r3, r0
 8001792:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8001794:	7b7b      	ldrb	r3, [r7, #13]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f3      	beq.n	8001782 <VL53L1X_SensorInit+0x4e>
	}
	status = VL53L1X_ClearInterrupt(dev);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f821 	bl	80017e4 <VL53L1X_ClearInterrupt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73bb      	strb	r3, [r7, #14]
	status = VL53L1X_StopRanging(dev);
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f86c 	bl	8001886 <VL53L1X_StopRanging>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	2209      	movs	r2, #9
 80017b6:	2108      	movs	r1, #8
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fc13 	bl	8001fe4 <VL53L1_WrByte>
 80017be:	4603      	mov	r3, r0
 80017c0:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	2200      	movs	r2, #0
 80017c6:	210b      	movs	r1, #11
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fc0b 	bl	8001fe4 <VL53L1_WrByte>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73bb      	strb	r3, [r7, #14]
	return status;
 80017d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08005de0 	.word	0x08005de0

080017e4 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	2201      	movs	r2, #1
 80017f6:	2186      	movs	r1, #134	; 0x86
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fbf3 	bl	8001fe4 <VL53L1_WrByte>
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
	return status;
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	6039      	str	r1, [r7, #0]
 8001818:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800181e:	f107 020e 	add.w	r2, r7, #14
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	2130      	movs	r1, #48	; 0x30
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fc78 	bl	800211c <VL53L1_RdByte>
 800182c:	4603      	mov	r3, r0
 800182e:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	b2db      	uxtb	r3, r3
 8001838:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 800183a:	7bbb      	ldrb	r3, [r7, #14]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	701a      	strb	r2, [r3, #0]
	return status;
 8001850:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	2240      	movs	r2, #64	; 0x40
 800186e:	2187      	movs	r1, #135	; 0x87
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fbb7 	bl	8001fe4 <VL53L1_WrByte>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
	return status;
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	2200      	movs	r2, #0
 8001898:	2187      	movs	r1, #135	; 0x87
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fba2 	bl	8001fe4 <VL53L1_WrByte>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
	return status;
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80018c0:	f107 020d 	add.w	r2, r7, #13
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ffa0 	bl	800180e <VL53L1X_GetInterruptPolarity>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80018d2:	f107 020e 	add.w	r2, r7, #14
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2131      	movs	r1, #49	; 0x31
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fc1e 	bl	800211c <VL53L1_RdByte>
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80018e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10c      	bne.n	8001906 <VL53L1X_CheckForDataReady+0x56>
		if ((Temp & 1) == IntPol)
 80018ec:	7bbb      	ldrb	r3, [r7, #14]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	7b7a      	ldrb	r2, [r7, #13]
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d103      	bne.n	8001900 <VL53L1X_CheckForDataReady+0x50>
			*isDataReady = 1;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e002      	b.n	8001906 <VL53L1X_CheckForDataReady+0x56>
		else
			*isDataReady = 0;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	460a      	mov	r2, r1
 800191c:	80fb      	strh	r3, [r7, #6]
 800191e:	4613      	mov	r3, r2
 8001920:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetDistanceMode(dev, &DM);
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f9fb 	bl	8001d2a <VL53L1X_GetDistanceMode>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 8001938:	89bb      	ldrh	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <VL53L1X_SetTimingBudgetInMs+0x30>
		return 1;
 800193e:	2301      	movs	r3, #1
 8001940:	e0e8      	b.n	8001b14 <VL53L1X_SetTimingBudgetInMs+0x202>
	else if (DM == 1) {	/* Short DistanceMode */
 8001942:	89bb      	ldrh	r3, [r7, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d17a      	bne.n	8001a3e <VL53L1X_SetTimingBudgetInMs+0x12c>
		switch (TimingBudgetInMs) {
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	2b32      	cmp	r3, #50	; 0x32
 800194c:	d037      	beq.n	80019be <VL53L1X_SetTimingBudgetInMs+0xac>
 800194e:	2b32      	cmp	r3, #50	; 0x32
 8001950:	dc06      	bgt.n	8001960 <VL53L1X_SetTimingBudgetInMs+0x4e>
 8001952:	2b14      	cmp	r3, #20
 8001954:	d019      	beq.n	800198a <VL53L1X_SetTimingBudgetInMs+0x78>
 8001956:	2b21      	cmp	r3, #33	; 0x21
 8001958:	d024      	beq.n	80019a4 <VL53L1X_SetTimingBudgetInMs+0x92>
 800195a:	2b0f      	cmp	r3, #15
 800195c:	d008      	beq.n	8001970 <VL53L1X_SetTimingBudgetInMs+0x5e>
 800195e:	e06a      	b.n	8001a36 <VL53L1X_SetTimingBudgetInMs+0x124>
 8001960:	2bc8      	cmp	r3, #200	; 0xc8
 8001962:	d04a      	beq.n	80019fa <VL53L1X_SetTimingBudgetInMs+0xe8>
 8001964:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001968:	d056      	beq.n	8001a18 <VL53L1X_SetTimingBudgetInMs+0x106>
 800196a:	2b64      	cmp	r3, #100	; 0x64
 800196c:	d036      	beq.n	80019dc <VL53L1X_SetTimingBudgetInMs+0xca>
 800196e:	e062      	b.n	8001a36 <VL53L1X_SetTimingBudgetInMs+0x124>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	221d      	movs	r2, #29
 8001974:	215e      	movs	r1, #94	; 0x5e
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fb60 	bl	800203c <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	2227      	movs	r2, #39	; 0x27
 8001980:	2161      	movs	r1, #97	; 0x61
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fb5a 	bl	800203c <VL53L1_WrWord>
					0x0027);
			break;
 8001988:	e0c2      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	2251      	movs	r2, #81	; 0x51
 800198e:	215e      	movs	r1, #94	; 0x5e
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fb53 	bl	800203c <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	226e      	movs	r2, #110	; 0x6e
 800199a:	2161      	movs	r1, #97	; 0x61
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fb4d 	bl	800203c <VL53L1_WrWord>
					0x006E);
			break;
 80019a2:	e0b5      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	22d6      	movs	r2, #214	; 0xd6
 80019a8:	215e      	movs	r1, #94	; 0x5e
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fb46 	bl	800203c <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	226e      	movs	r2, #110	; 0x6e
 80019b4:	2161      	movs	r1, #97	; 0x61
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fb40 	bl	800203c <VL53L1_WrWord>
					0x006E);
			break;
 80019bc:	e0a8      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80019c4:	215e      	movs	r1, #94	; 0x5e
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fb38 	bl	800203c <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80019d2:	2161      	movs	r1, #97	; 0x61
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fb31 	bl	800203c <VL53L1_WrWord>
					0x01E8);
			break;
 80019da:	e099      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	f240 22e1 	movw	r2, #737	; 0x2e1
 80019e2:	215e      	movs	r1, #94	; 0x5e
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fb29 	bl	800203c <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	f44f 7262 	mov.w	r2, #904	; 0x388
 80019f0:	2161      	movs	r1, #97	; 0x61
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fb22 	bl	800203c <VL53L1_WrWord>
					0x0388);
			break;
 80019f8:	e08a      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001a00:	215e      	movs	r1, #94	; 0x5e
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fb1a 	bl	800203c <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	f240 4296 	movw	r2, #1174	; 0x496
 8001a0e:	2161      	movs	r1, #97	; 0x61
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fb13 	bl	800203c <VL53L1_WrWord>
					0x0496);
			break;
 8001a16:	e07b      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f240 5291 	movw	r2, #1425	; 0x591
 8001a1e:	215e      	movs	r1, #94	; 0x5e
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fb0b 	bl	800203c <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001a2c:	2161      	movs	r1, #97	; 0x61
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fb04 	bl	800203c <VL53L1_WrWord>
					0x05C1);
			break;
 8001a34:	e06c      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		default:
			status = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
			break;
 8001a3a:	bf00      	nop
 8001a3c:	e068      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		}
	} else {
		switch (TimingBudgetInMs) {
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	2b32      	cmp	r3, #50	; 0x32
 8001a42:	d028      	beq.n	8001a96 <VL53L1X_SetTimingBudgetInMs+0x184>
 8001a44:	2b32      	cmp	r3, #50	; 0x32
 8001a46:	dc04      	bgt.n	8001a52 <VL53L1X_SetTimingBudgetInMs+0x140>
 8001a48:	2b14      	cmp	r3, #20
 8001a4a:	d00a      	beq.n	8001a62 <VL53L1X_SetTimingBudgetInMs+0x150>
 8001a4c:	2b21      	cmp	r3, #33	; 0x21
 8001a4e:	d015      	beq.n	8001a7c <VL53L1X_SetTimingBudgetInMs+0x16a>
 8001a50:	e05b      	b.n	8001b0a <VL53L1X_SetTimingBudgetInMs+0x1f8>
 8001a52:	2bc8      	cmp	r3, #200	; 0xc8
 8001a54:	d03b      	beq.n	8001ace <VL53L1X_SetTimingBudgetInMs+0x1bc>
 8001a56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a5a:	d047      	beq.n	8001aec <VL53L1X_SetTimingBudgetInMs+0x1da>
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d027      	beq.n	8001ab0 <VL53L1X_SetTimingBudgetInMs+0x19e>
 8001a60:	e053      	b.n	8001b0a <VL53L1X_SetTimingBudgetInMs+0x1f8>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	221e      	movs	r2, #30
 8001a66:	215e      	movs	r1, #94	; 0x5e
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fae7 	bl	800203c <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2222      	movs	r2, #34	; 0x22
 8001a72:	2161      	movs	r1, #97	; 0x61
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fae1 	bl	800203c <VL53L1_WrWord>
					0x0022);
			break;
 8001a7a:	e049      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	2260      	movs	r2, #96	; 0x60
 8001a80:	215e      	movs	r1, #94	; 0x5e
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fada 	bl	800203c <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	226e      	movs	r2, #110	; 0x6e
 8001a8c:	2161      	movs	r1, #97	; 0x61
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fad4 	bl	800203c <VL53L1_WrWord>
					0x006E);
			break;
 8001a94:	e03c      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	22ad      	movs	r2, #173	; 0xad
 8001a9a:	215e      	movs	r1, #94	; 0x5e
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 facd 	bl	800203c <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	22c6      	movs	r2, #198	; 0xc6
 8001aa6:	2161      	movs	r1, #97	; 0x61
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fac7 	bl	800203c <VL53L1_WrWord>
					0x00C6);
			break;
 8001aae:	e02f      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8001ab6:	215e      	movs	r1, #94	; 0x5e
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 fabf 	bl	800203c <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 8001ac4:	2161      	movs	r1, #97	; 0x61
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fab8 	bl	800203c <VL53L1_WrWord>
					0x01EA);
			break;
 8001acc:	e020      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	f240 22d9 	movw	r2, #729	; 0x2d9
 8001ad4:	215e      	movs	r1, #94	; 0x5e
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fab0 	bl	800203c <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 8001ae2:	2161      	movs	r1, #97	; 0x61
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 faa9 	bl	800203c <VL53L1_WrWord>
					0x02F8);
			break;
 8001aea:	e011      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	f240 428f 	movw	r2, #1167	; 0x48f
 8001af2:	215e      	movs	r1, #94	; 0x5e
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 faa1 	bl	800203c <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8001b00:	2161      	movs	r1, #97	; 0x61
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fa9a 	bl	800203c <VL53L1_WrWord>
					0x04A4);
			break;
 8001b08:	e002      	b.n	8001b10 <VL53L1X_SetTimingBudgetInMs+0x1fe>
		default:
			status = 1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
			break;
 8001b0e:	bf00      	nop
		}
	}
	return status;
 8001b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8001b2c:	f107 020c 	add.w	r2, r7, #12
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	215e      	movs	r1, #94	; 0x5e
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fb29 	bl	800218c <VL53L1_RdWord>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 8001b3e:	89bb      	ldrh	r3, [r7, #12]
 8001b40:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8001b44:	d03b      	beq.n	8001bbe <VL53L1X_GetTimingBudgetInMs+0xa2>
 8001b46:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8001b4a:	dc0f      	bgt.n	8001b6c <VL53L1X_GetTimingBudgetInMs+0x50>
 8001b4c:	2b51      	cmp	r3, #81	; 0x51
 8001b4e:	d02e      	beq.n	8001bae <VL53L1X_GetTimingBudgetInMs+0x92>
 8001b50:	2b51      	cmp	r3, #81	; 0x51
 8001b52:	dc04      	bgt.n	8001b5e <VL53L1X_GetTimingBudgetInMs+0x42>
 8001b54:	2b1d      	cmp	r3, #29
 8001b56:	d026      	beq.n	8001ba6 <VL53L1X_GetTimingBudgetInMs+0x8a>
 8001b58:	2b1e      	cmp	r3, #30
 8001b5a:	d028      	beq.n	8001bae <VL53L1X_GetTimingBudgetInMs+0x92>
 8001b5c:	e040      	b.n	8001be0 <VL53L1X_GetTimingBudgetInMs+0xc4>
 8001b5e:	2bad      	cmp	r3, #173	; 0xad
 8001b60:	d02d      	beq.n	8001bbe <VL53L1X_GetTimingBudgetInMs+0xa2>
 8001b62:	2bd6      	cmp	r3, #214	; 0xd6
 8001b64:	d027      	beq.n	8001bb6 <VL53L1X_GetTimingBudgetInMs+0x9a>
 8001b66:	2b60      	cmp	r3, #96	; 0x60
 8001b68:	d025      	beq.n	8001bb6 <VL53L1X_GetTimingBudgetInMs+0x9a>
 8001b6a:	e039      	b.n	8001be0 <VL53L1X_GetTimingBudgetInMs+0xc4>
 8001b6c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d028      	beq.n	8001bc6 <VL53L1X_GetTimingBudgetInMs+0xaa>
 8001b74:	f240 22e1 	movw	r2, #737	; 0x2e1
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	dc07      	bgt.n	8001b8c <VL53L1X_GetTimingBudgetInMs+0x70>
 8001b7c:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001b80:	d021      	beq.n	8001bc6 <VL53L1X_GetTimingBudgetInMs+0xaa>
 8001b82:	f240 22d9 	movw	r2, #729	; 0x2d9
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d021      	beq.n	8001bce <VL53L1X_GetTimingBudgetInMs+0xb2>
 8001b8a:	e029      	b.n	8001be0 <VL53L1X_GetTimingBudgetInMs+0xc4>
 8001b8c:	f240 428f 	movw	r2, #1167	; 0x48f
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d020      	beq.n	8001bd6 <VL53L1X_GetTimingBudgetInMs+0xba>
 8001b94:	f240 5291 	movw	r2, #1425	; 0x591
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d01c      	beq.n	8001bd6 <VL53L1X_GetTimingBudgetInMs+0xba>
 8001b9c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d014      	beq.n	8001bce <VL53L1X_GetTimingBudgetInMs+0xb2>
 8001ba4:	e01c      	b.n	8001be0 <VL53L1X_GetTimingBudgetInMs+0xc4>
		case 0x001D :
			*pTimingBudget = 15;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	220f      	movs	r2, #15
 8001baa:	801a      	strh	r2, [r3, #0]
			break;
 8001bac:	e01d      	b.n	8001bea <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2214      	movs	r2, #20
 8001bb2:	801a      	strh	r2, [r3, #0]
			break;
 8001bb4:	e019      	b.n	8001bea <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2221      	movs	r2, #33	; 0x21
 8001bba:	801a      	strh	r2, [r3, #0]
			break;
 8001bbc:	e015      	b.n	8001bea <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2232      	movs	r2, #50	; 0x32
 8001bc2:	801a      	strh	r2, [r3, #0]
			break;
 8001bc4:	e011      	b.n	8001bea <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2264      	movs	r2, #100	; 0x64
 8001bca:	801a      	strh	r2, [r3, #0]
			break;
 8001bcc:	e00d      	b.n	8001bea <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	22c8      	movs	r2, #200	; 0xc8
 8001bd2:	801a      	strh	r2, [r3, #0]
			break;
 8001bd4:	e009      	b.n	8001bea <VL53L1X_GetTimingBudgetInMs+0xce>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bdc:	801a      	strh	r2, [r3, #0]
			break;
 8001bde:	e004      	b.n	8001bea <VL53L1X_GetTimingBudgetInMs+0xce>
		default:
			status = 1;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	460a      	mov	r2, r1
 8001c00:	80fb      	strh	r3, [r7, #6]
 8001c02:	4613      	mov	r3, r2
 8001c04:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8001c0a:	f107 020c 	add.w	r2, r7, #12
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff82 	bl	8001b1c <VL53L1X_GetTimingBudgetInMs>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 8001c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <VL53L1X_SetDistanceMode+0x32>
		return 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e07c      	b.n	8001d22 <VL53L1X_SetDistanceMode+0x12c>
	switch (DM) {
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d002      	beq.n	8001c34 <VL53L1X_SetDistanceMode+0x3e>
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d033      	beq.n	8001c9a <VL53L1X_SetDistanceMode+0xa4>
 8001c32:	e065      	b.n	8001d00 <VL53L1X_SetDistanceMode+0x10a>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	2214      	movs	r2, #20
 8001c38:	214b      	movs	r1, #75	; 0x4b
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f9d2 	bl	8001fe4 <VL53L1_WrByte>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	2207      	movs	r2, #7
 8001c48:	2160      	movs	r1, #96	; 0x60
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f9ca 	bl	8001fe4 <VL53L1_WrByte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	2205      	movs	r2, #5
 8001c58:	2163      	movs	r1, #99	; 0x63
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f9c2 	bl	8001fe4 <VL53L1_WrByte>
 8001c60:	4603      	mov	r3, r0
 8001c62:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	2238      	movs	r2, #56	; 0x38
 8001c68:	2169      	movs	r1, #105	; 0x69
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f9ba 	bl	8001fe4 <VL53L1_WrByte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	f240 7205 	movw	r2, #1797	; 0x705
 8001c7a:	2178      	movs	r1, #120	; 0x78
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f9dd 	bl	800203c <VL53L1_WrWord>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	f240 6206 	movw	r2, #1542	; 0x606
 8001c8c:	217a      	movs	r1, #122	; 0x7a
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f9d4 	bl	800203c <VL53L1_WrWord>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73fb      	strb	r3, [r7, #15]
		break;
 8001c98:	e035      	b.n	8001d06 <VL53L1X_SetDistanceMode+0x110>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	220a      	movs	r2, #10
 8001c9e:	214b      	movs	r1, #75	; 0x4b
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f99f 	bl	8001fe4 <VL53L1_WrByte>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	220f      	movs	r2, #15
 8001cae:	2160      	movs	r1, #96	; 0x60
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f997 	bl	8001fe4 <VL53L1_WrByte>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	220d      	movs	r2, #13
 8001cbe:	2163      	movs	r1, #99	; 0x63
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f98f 	bl	8001fe4 <VL53L1_WrByte>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	22b8      	movs	r2, #184	; 0xb8
 8001cce:	2169      	movs	r1, #105	; 0x69
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f987 	bl	8001fe4 <VL53L1_WrByte>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	f640 720d 	movw	r2, #3853	; 0xf0d
 8001ce0:	2178      	movs	r1, #120	; 0x78
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f9aa 	bl	800203c <VL53L1_WrWord>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	f640 620e 	movw	r2, #3598	; 0xe0e
 8001cf2:	217a      	movs	r1, #122	; 0x7a
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f9a1 	bl	800203c <VL53L1_WrWord>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	73fb      	strb	r3, [r7, #15]
		break;
 8001cfe:	e002      	b.n	8001d06 <VL53L1X_SetDistanceMode+0x110>
	default:
		status = 1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
		break;
 8001d04:	bf00      	nop
	}

	if (status == 0)
 8001d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d107      	bne.n	8001d1e <VL53L1X_SetDistanceMode+0x128>
		status = VL53L1X_SetTimingBudgetInMs(dev, TB);
 8001d0e:	89ba      	ldrh	r2, [r7, #12]
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fdfc 	bl	8001912 <VL53L1X_SetTimingBudgetInMs>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
	return status;
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	6039      	str	r1, [r7, #0]
 8001d34:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001d3a:	f107 020e 	add.w	r2, r7, #14
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	214b      	movs	r1, #75	; 0x4b
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f9ea 	bl	800211c <VL53L1_RdByte>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	2b14      	cmp	r3, #20
 8001d50:	d102      	bne.n	8001d58 <VL53L1X_GetDistanceMode+0x2e>
		*DM=1;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	2b0a      	cmp	r3, #10
 8001d5c:	d102      	bne.n	8001d64 <VL53L1X_GetDistanceMode+0x3a>
		*DM=2;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2202      	movs	r2, #2
 8001d62:	801a      	strh	r2, [r3, #0]
	return status;
 8001d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001d80:	f107 020c 	add.w	r2, r7, #12
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	21de      	movs	r1, #222	; 0xde
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f9ff 	bl	800218c <VL53L1_RdWord>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8001d92:	89bb      	ldrh	r3, [r7, #12]
 8001d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001d9c:	89bb      	ldrh	r3, [r7, #12]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	fb03 f302 	mul.w	r3, r3, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fba4 	bl	80004f4 <__aeabi_ui2d>
 8001dac:	a30c      	add	r3, pc, #48	; (adr r3, 8001de0 <VL53L1X_SetInterMeasurementInMs+0x70>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fc19 	bl	80005e8 <__aeabi_dmul>
 8001db6:	4603      	mov	r3, r0
 8001db8:	460c      	mov	r4, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	f7fe fe25 	bl	8000a0c <__aeabi_d2uiz>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	216c      	movs	r1, #108	; 0x6c
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f96b 	bl	80020a4 <VL53L1_WrDWord>
	return status;
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	f3af 8000 	nop.w
 8001de0:	33333333 	.word	0x33333333
 8001de4:	3ff13333 	.word	0x3ff13333

08001de8 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73bb      	strb	r3, [r7, #14]

	status = VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001dfc:	f107 020e 	add.w	r2, r7, #14
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	21e5      	movs	r1, #229	; 0xe5
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f989 	bl	800211c <VL53L1_RdByte>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8001e0e:	7bba      	ldrb	r2, [r7, #14]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	701a      	strb	r2, [r3, #0]
	return status;
 8001e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status = (VL53L1_RdWord(dev,
 8001e30:	f107 020c 	add.w	r2, r7, #12
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	2196      	movs	r1, #150	; 0x96
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f9a7 	bl	800218c <VL53L1_RdWord>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001e42:	89ba      	ldrh	r2, [r7, #12]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	801a      	strh	r2, [r3, #0]
	return status;
 8001e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	*rangeStatus = 255;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	701a      	strb	r2, [r3, #0]
	status = VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8001e6a:	f107 020e 	add.w	r2, r7, #14
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	2189      	movs	r1, #137	; 0x89
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f952 	bl	800211c <VL53L1_RdByte>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt & 0x1F;
 8001e7c:	7bbb      	ldrb	r3, [r7, #14]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	73bb      	strb	r3, [r7, #14]
	if (RgSt < 24)
 8001e86:	7bbb      	ldrb	r3, [r7, #14]
 8001e88:	2b17      	cmp	r3, #23
 8001e8a:	d805      	bhi.n	8001e98 <VL53L1X_GetRangeStatus+0x44>
		*rangeStatus = status_rtn[RgSt];
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <VL53L1X_GetRangeStatus+0x50>)
 8001e92:	5c9a      	ldrb	r2, [r3, r2]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	701a      	strb	r2, [r3, #0]
	return status;
 8001e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	08005e3c 	.word	0x08005e3c

08001ea8 <VL53L1X_SetROICenter>:
	*high = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_SetROICenter(uint16_t dev, uint8_t ROICenter)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	80fb      	strh	r3, [r7, #6]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	717b      	strb	r3, [r7, #5]
	VL53L1X_ERROR status = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_CENTRE_SPAD, ROICenter);
 8001ebc:	797a      	ldrb	r2, [r7, #5]
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	217f      	movs	r1, #127	; 0x7f
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f88e 	bl	8001fe4 <VL53L1_WrByte>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
	return status;
 8001ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <VL53L1X_SetROI>:
	*ROICenter = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_SetROI(uint16_t dev, uint16_t X, uint16_t Y)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	80bb      	strh	r3, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	807b      	strh	r3, [r7, #2]
	uint8_t OpticalCenter;
	VL53L1X_ERROR status = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]

	status =VL53L1_RdByte(dev, VL53L1_ROI_CONFIG__MODE_ROI_CENTRE_SPAD, &OpticalCenter);
 8001eee:	f107 020e 	add.w	r2, r7, #14
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f90f 	bl	800211c <VL53L1_RdByte>
 8001efe:	4603      	mov	r3, r0
 8001f00:	73fb      	strb	r3, [r7, #15]
	if (X > 16)
 8001f02:	88bb      	ldrh	r3, [r7, #4]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d901      	bls.n	8001f0c <VL53L1X_SetROI+0x34>
		X = 16;
 8001f08:	2310      	movs	r3, #16
 8001f0a:	80bb      	strh	r3, [r7, #4]
	if (Y > 16)
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d901      	bls.n	8001f16 <VL53L1X_SetROI+0x3e>
		Y = 16;
 8001f12:	2310      	movs	r3, #16
 8001f14:	807b      	strh	r3, [r7, #2]
	if (X > 10 || Y > 10){
 8001f16:	88bb      	ldrh	r3, [r7, #4]
 8001f18:	2b0a      	cmp	r3, #10
 8001f1a:	d802      	bhi.n	8001f22 <VL53L1X_SetROI+0x4a>
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	2b0a      	cmp	r3, #10
 8001f20:	d901      	bls.n	8001f26 <VL53L1X_SetROI+0x4e>
		OpticalCenter = 199;
 8001f22:	23c7      	movs	r3, #199	; 0xc7
 8001f24:	73bb      	strb	r3, [r7, #14]
	}
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_CENTRE_SPAD, OpticalCenter);
 8001f26:	7bba      	ldrb	r2, [r7, #14]
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	217f      	movs	r1, #127	; 0x7f
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f859 	bl	8001fe4 <VL53L1_WrByte>
 8001f32:	4603      	mov	r3, r0
 8001f34:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
		       (Y - 1) << 4 | (X - 1));
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b25b      	sxtb	r3, r3
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f846 	bl	8001fe4 <VL53L1_WrByte>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
	return status;
 8001f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_I2CWrite>:
/*******************************************************/


uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	330a      	adds	r3, #10
 8001f7a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	89f9      	ldrh	r1, [r7, #14]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <_I2CWrite+0x38>)
 8001f8c:	f000 fce2 	bl	8002954 <HAL_I2C_Master_Transmit>
 8001f90:	4603      	mov	r3, r0
 8001f92:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8001f94:	693b      	ldr	r3, [r7, #16]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200000e0 	.word	0x200000e0

08001fa4 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	4603      	mov	r3, r0
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	b299      	uxth	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <_I2CRead+0x3c>)
 8001fce:	f000 fdb5 	bl	8002b3c <HAL_I2C_Master_Receive>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8001fd6:	693b      	ldr	r3, [r7, #16]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200000e0 	.word	0x200000e0

08001fe4 <VL53L1_WrByte>:
done:
    //VL53L1_PutI2cBus();
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	80bb      	strh	r3, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001ffa:	88bb      	ldrh	r3, [r7, #4]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <VL53L1_WrByte+0x54>)
 8002004:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8002006:	88bb      	ldrh	r3, [r7, #4]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <VL53L1_WrByte+0x54>)
 800200c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <VL53L1_WrByte+0x54>)
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	7093      	strb	r3, [r2, #2]

    //VL53L1_GetI2cBus();
    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	2203      	movs	r2, #3
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <VL53L1_WrByte+0x54>)
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ffa4 	bl	8001f68 <_I2CWrite>
 8002020:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8002028:	23f3      	movs	r3, #243	; 0xf3
 800202a:	73fb      	strb	r3, [r7, #15]
    }
    //VL53L1_PutI2cBus();
    return Status;
 800202c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200001b4 	.word	0x200001b4

0800203c <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t dev, uint16_t index, uint16_t data) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	80fb      	strh	r3, [r7, #6]
 8002046:	460b      	mov	r3, r1
 8002048:	80bb      	strh	r3, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	807b      	strh	r3, [r7, #2]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8002052:	88bb      	ldrh	r3, [r7, #4]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	b29b      	uxth	r3, r3
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <VL53L1_WrWord+0x64>)
 800205c:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800205e:	88bb      	ldrh	r3, [r7, #4]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <VL53L1_WrWord+0x64>)
 8002064:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	b29b      	uxth	r3, r3
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <VL53L1_WrWord+0x64>)
 8002070:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <VL53L1_WrWord+0x64>)
 8002078:	70da      	strb	r2, [r3, #3]

    //VL53L1_GetI2cBus();
    status_int = _I2CWrite(dev, _I2CBuffer, 4);
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	2204      	movs	r2, #4
 800207e:	4908      	ldr	r1, [pc, #32]	; (80020a0 <VL53L1_WrWord+0x64>)
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff71 	bl	8001f68 <_I2CWrite>
 8002086:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <VL53L1_WrWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800208e:	23f3      	movs	r3, #243	; 0xf3
 8002090:	73fb      	strb	r3, [r7, #15]
    }
    //VL53L1_PutI2cBus();
    return Status;
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200001b4 	.word	0x200001b4

080020a4 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t dev, uint16_t index, uint32_t data) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	603a      	str	r2, [r7, #0]
 80020ae:	80fb      	strh	r3, [r7, #6]
 80020b0:	460b      	mov	r3, r1
 80020b2:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 80020b8:	88bb      	ldrh	r3, [r7, #4]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <VL53L1_WrDWord+0x74>)
 80020c2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <VL53L1_WrDWord+0x74>)
 80020ca:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	0e1b      	lsrs	r3, r3, #24
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <VL53L1_WrDWord+0x74>)
 80020d4:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <VL53L1_WrDWord+0x74>)
 80020de:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <VL53L1_WrDWord+0x74>)
 80020e8:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <VL53L1_WrDWord+0x74>)
 80020f0:	715a      	strb	r2, [r3, #5]
    //VL53L1_GetI2cBus();
    status_int = _I2CWrite(dev, _I2CBuffer, 6);
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2206      	movs	r2, #6
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <VL53L1_WrDWord+0x74>)
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff35 	bl	8001f68 <_I2CWrite>
 80020fe:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <VL53L1_WrDWord+0x66>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8002106:	23f3      	movs	r3, #243	; 0xf3
 8002108:	73fb      	strb	r3, [r7, #15]
    }
    //VL53L1_PutI2cBus();
    return Status;
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200001b4 	.word	0x200001b4

0800211c <VL53L1_RdByte>:

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	603a      	str	r2, [r7, #0]
 8002126:	80fb      	strh	r3, [r7, #6]
 8002128:	460b      	mov	r3, r1
 800212a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b29b      	uxth	r3, r3
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <VL53L1_RdByte+0x6c>)
 800213a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <VL53L1_RdByte+0x6c>)
 8002142:	705a      	strb	r2, [r3, #1]
    //VL53L1_GetI2cBus();
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	2202      	movs	r2, #2
 8002148:	490f      	ldr	r1, [pc, #60]	; (8002188 <VL53L1_RdByte+0x6c>)
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff0c 	bl	8001f68 <_I2CWrite>
 8002150:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8002158:	23f3      	movs	r3, #243	; 0xf3
 800215a:	73fb      	strb	r3, [r7, #15]
        goto done;
 800215c:	e00d      	b.n	800217a <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(dev, data, 1);
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	2201      	movs	r2, #1
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff1d 	bl	8001fa4 <_I2CRead>
 800216a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8002172:	23f3      	movs	r3, #243	; 0xf3
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	e000      	b.n	800217a <VL53L1_RdByte+0x5e>
    }
done:
 8002178:	bf00      	nop
    //VL53L1_PutI2cBus();
    return Status;
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200001b4 	.word	0x200001b4

0800218c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	603a      	str	r2, [r7, #0]
 8002196:	80fb      	strh	r3, [r7, #6]
 8002198:	460b      	mov	r3, r1
 800219a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80021a0:	88bb      	ldrh	r3, [r7, #4]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <VL53L1_RdWord+0x80>)
 80021aa:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80021ac:	88bb      	ldrh	r3, [r7, #4]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <VL53L1_RdWord+0x80>)
 80021b2:	705a      	strb	r2, [r3, #1]
    //VL53L1_GetI2cBus();
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	2202      	movs	r2, #2
 80021b8:	4914      	ldr	r1, [pc, #80]	; (800220c <VL53L1_RdWord+0x80>)
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fed4 	bl	8001f68 <_I2CWrite>
 80021c0:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80021c8:	23f3      	movs	r3, #243	; 0xf3
 80021ca:	73fb      	strb	r3, [r7, #15]
        goto done;
 80021cc:	e018      	b.n	8002200 <VL53L1_RdWord+0x74>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	2202      	movs	r2, #2
 80021d2:	490e      	ldr	r1, [pc, #56]	; (800220c <VL53L1_RdWord+0x80>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fee5 	bl	8001fa4 <_I2CRead>
 80021da:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80021e2:	23f3      	movs	r3, #243	; 0xf3
 80021e4:	73fb      	strb	r3, [r7, #15]
        goto done;
 80021e6:	e00b      	b.n	8002200 <VL53L1_RdWord+0x74>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <VL53L1_RdWord+0x80>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <VL53L1_RdWord+0x80>)
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	801a      	strh	r2, [r3, #0]
done:
    //VL53L1_PutI2cBus();
    return Status;
 8002200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200001b4 	.word	0x200001b4

08002210 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221a:	2003      	movs	r0, #3
 800221c:	f000 f93c 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002220:	2000      	movs	r0, #0
 8002222:	f000 f80d 	bl	8002240 <HAL_InitTick>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	e001      	b.n	8002236 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002232:	f7fe ff0d 	bl	8001050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002236:	79fb      	ldrb	r3, [r7, #7]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_InitTick+0x68>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d022      	beq.n	800229a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_InitTick+0x6c>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_InitTick+0x68>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002260:	fbb1 f3f3 	udiv	r3, r1, r3
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f93c 	bl	80024e6 <HAL_SYSTICK_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10f      	bne.n	8002294 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	d809      	bhi.n	800228e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227a:	2200      	movs	r2, #0
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	f04f 30ff 	mov.w	r0, #4294967295
 8002282:	f000 f914 	bl	80024ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_InitTick+0x70>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e007      	b.n	800229e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e004      	b.n	800229e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e001      	b.n	800229e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	2000001c 	.word	0x2000001c
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000018 	.word	0x20000018

080022b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_IncTick+0x1c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_IncTick+0x20>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_IncTick+0x1c>)
 80022c4:	6013      	str	r3, [r2, #0]
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	200002b4 	.word	0x200002b4
 80022d4:	2000001c 	.word	0x2000001c

080022d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	200002b4 	.word	0x200002b4

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d004      	beq.n	8002314 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_Delay+0x40>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002314:	bf00      	nop
 8002316:	f7ff ffdf 	bl	80022d8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	429a      	cmp	r2, r3
 8002324:	d8f7      	bhi.n	8002316 <HAL_Delay+0x26>
  {
  }
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000001c 	.word	0x2000001c

08002334 <__NVIC_SetPriorityGrouping>:
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_SetPriority>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002464:	d301      	bcc.n	800246a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SysTick_Config+0x40>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002472:	210f      	movs	r1, #15
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f7ff ff8e 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SysTick_Config+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SysTick_Config+0x40>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff47 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff5c 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff8e 	bl	80023ec <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5d 	bl	8002398 <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffb0 	bl	8002454 <SysTick_Config>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250e:	e148      	b.n	80027a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 813a 	beq.w	800279c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d00b      	beq.n	8002548 <HAL_GPIO_Init+0x48>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d007      	beq.n	8002548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253c:	2b11      	cmp	r3, #17
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b12      	cmp	r3, #18
 8002546:	d130      	bne.n	80025aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0201 	and.w	r2, r3, #1
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0xea>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b12      	cmp	r3, #18
 80025e8:	d123      	bne.n	8002632 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	6939      	ldr	r1, [r7, #16]
 800262e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0203 	and.w	r2, r3, #3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8094 	beq.w	800279c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002674:	4b52      	ldr	r3, [pc, #328]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	4a51      	ldr	r2, [pc, #324]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6613      	str	r3, [r2, #96]	; 0x60
 8002680:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800268c:	4a4d      	ldr	r2, [pc, #308]	; (80027c4 <HAL_GPIO_Init+0x2c4>)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	220f      	movs	r2, #15
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026b6:	d00d      	beq.n	80026d4 <HAL_GPIO_Init+0x1d4>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_GPIO_Init+0x2c8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d007      	beq.n	80026d0 <HAL_GPIO_Init+0x1d0>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_GPIO_Init+0x2cc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_GPIO_Init+0x1cc>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e004      	b.n	80026d6 <HAL_GPIO_Init+0x1d6>
 80026cc:	2307      	movs	r3, #7
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x1d6>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_GPIO_Init+0x1d6>
 80026d4:	2300      	movs	r3, #0
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e6:	4937      	ldr	r1, [pc, #220]	; (80027c4 <HAL_GPIO_Init+0x2c4>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_GPIO_Init+0x2d0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002718:	4a2d      	ldr	r2, [pc, #180]	; (80027d0 <HAL_GPIO_Init+0x2d0>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <HAL_GPIO_Init+0x2d0>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002742:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_GPIO_Init+0x2d0>)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_GPIO_Init+0x2d0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_GPIO_Init+0x2d0>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_GPIO_Init+0x2d0>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002796:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_GPIO_Init+0x2d0>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f aeaf 	bne.w	8002510 <HAL_GPIO_Init+0x10>
  }
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010000 	.word	0x40010000
 80027c8:	48000400 	.word	0x48000400
 80027cc:	48000800 	.word	0x48000800
 80027d0:	40010400 	.word	0x40010400

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800281c:	887a      	ldrh	r2, [r7, #2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002822:	e002      	b.n	800282a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	619a      	str	r2, [r3, #24]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e081      	b.n	800294c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7fe fc1b 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2224      	movs	r2, #36	; 0x24
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002886:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002896:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	e006      	b.n	80028be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d104      	bne.n	80028d0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	ea42 0103 	orr.w	r1, r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	021a      	lsls	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69d9      	ldr	r1, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1a      	ldr	r2, [r3, #32]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	461a      	mov	r2, r3
 8002960:	460b      	mov	r3, r1
 8002962:	817b      	strh	r3, [r7, #10]
 8002964:	4613      	mov	r3, r2
 8002966:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b20      	cmp	r3, #32
 8002972:	f040 80da 	bne.w	8002b2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x30>
 8002980:	2302      	movs	r3, #2
 8002982:	e0d3      	b.n	8002b2c <HAL_I2C_Master_Transmit+0x1d8>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800298c:	f7ff fca4 	bl	80022d8 <HAL_GetTick>
 8002990:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2319      	movs	r3, #25
 8002998:	2201      	movs	r2, #1
 800299a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f9e6 	bl	8002d70 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0be      	b.n	8002b2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2221      	movs	r2, #33	; 0x21
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2210      	movs	r2, #16
 80029ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	893a      	ldrh	r2, [r7, #8]
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2bff      	cmp	r3, #255	; 0xff
 80029de:	d90e      	bls.n	80029fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	22ff      	movs	r2, #255	; 0xff
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <HAL_I2C_Master_Transmit+0x1e0>)
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fb48 	bl	800308c <I2C_TransferConfig>
 80029fc:	e06c      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	8979      	ldrh	r1, [r7, #10]
 8002a10:	4b48      	ldr	r3, [pc, #288]	; (8002b34 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 fb37 	bl	800308c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a1e:	e05b      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	6a39      	ldr	r1, [r7, #32]
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f9e3 	bl	8002df0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e07b      	b.n	8002b2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d034      	beq.n	8002ad8 <HAL_I2C_Master_Transmit+0x184>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d130      	bne.n	8002ad8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f975 	bl	8002d70 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e04d      	b.n	8002b2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2bff      	cmp	r3, #255	; 0xff
 8002a98:	d90e      	bls.n	8002ab8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	22ff      	movs	r2, #255	; 0xff
 8002a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	8979      	ldrh	r1, [r7, #10]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 faeb 	bl	800308c <I2C_TransferConfig>
 8002ab6:	e00f      	b.n	8002ad8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	2300      	movs	r3, #0
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fada 	bl	800308c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d19e      	bne.n	8002a20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	6a39      	ldr	r1, [r7, #32]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f9c2 	bl	8002e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e01a      	b.n	8002b2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2220      	movs	r2, #32
 8002afc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	80002000 	.word	0x80002000
 8002b38:	fe00e800 	.word	0xfe00e800

08002b3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	460b      	mov	r3, r1
 8002b4a:	817b      	strh	r3, [r7, #10]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	f040 80db 	bne.w	8002d14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_I2C_Master_Receive+0x30>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0d4      	b.n	8002d16 <HAL_I2C_Master_Receive+0x1da>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b74:	f7ff fbb0 	bl	80022d8 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	2319      	movs	r3, #25
 8002b80:	2201      	movs	r2, #1
 8002b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f8f2 	bl	8002d70 <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0bf      	b.n	8002d16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2222      	movs	r2, #34	; 0x22
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	893a      	ldrh	r2, [r7, #8]
 8002bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2bff      	cmp	r3, #255	; 0xff
 8002bc6:	d90e      	bls.n	8002be6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	22ff      	movs	r2, #255	; 0xff
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	4b52      	ldr	r3, [pc, #328]	; (8002d20 <HAL_I2C_Master_Receive+0x1e4>)
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fa54 	bl	800308c <I2C_TransferConfig>
 8002be4:	e06d      	b.n	8002cc2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_I2C_Master_Receive+0x1e4>)
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fa43 	bl	800308c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c06:	e05c      	b.n	8002cc2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	6a39      	ldr	r1, [r7, #32]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f96b 	bl	8002ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e07c      	b.n	8002d16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d034      	beq.n	8002cc2 <HAL_I2C_Master_Receive+0x186>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d130      	bne.n	8002cc2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2200      	movs	r2, #0
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f880 	bl	8002d70 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e04d      	b.n	8002d16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2bff      	cmp	r3, #255	; 0xff
 8002c82:	d90e      	bls.n	8002ca2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	22ff      	movs	r2, #255	; 0xff
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	8979      	ldrh	r1, [r7, #10]
 8002c92:	2300      	movs	r3, #0
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f9f6 	bl	800308c <I2C_TransferConfig>
 8002ca0:	e00f      	b.n	8002cc2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f9e5 	bl	800308c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d19d      	bne.n	8002c08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f8cd 	bl	8002e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e01a      	b.n	8002d16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_I2C_Master_Receive+0x1e8>)
 8002cf4:	400b      	ands	r3, r1
 8002cf6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	80002400 	.word	0x80002400
 8002d24:	fe00e800 	.word	0xfe00e800

08002d28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d103      	bne.n	8002d46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d007      	beq.n	8002d64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	619a      	str	r2, [r3, #24]
  }
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d80:	e022      	b.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d01e      	beq.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8a:	f7ff faa5 	bl	80022d8 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d113      	bne.n	8002dc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e00f      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d0cd      	beq.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dfc:	e02c      	b.n	8002e58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f8dc 	bl	8002fc0 <I2C_IsAcknowledgeFailed>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e02a      	b.n	8002e68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d01e      	beq.n	8002e58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7ff fa5d 	bl	80022d8 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d113      	bne.n	8002e58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e007      	b.n	8002e68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d1cb      	bne.n	8002dfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e7c:	e028      	b.n	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f89c 	bl	8002fc0 <I2C_IsAcknowledgeFailed>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e026      	b.n	8002ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e92:	f7ff fa21 	bl	80022d8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d113      	bne.n	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e007      	b.n	8002ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d1cf      	bne.n	8002e7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef4:	e055      	b.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f860 	bl	8002fc0 <I2C_IsAcknowledgeFailed>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e053      	b.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d129      	bne.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d105      	bne.n	8002f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e03f      	b.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2220      	movs	r2, #32
 8002f38:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002f46:	400b      	ands	r3, r1
 8002f48:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e022      	b.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6c:	f7ff f9b4 	bl	80022d8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d302      	bcc.n	8002f82 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10f      	bne.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e007      	b.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d1a2      	bne.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	fe00e800 	.word	0xfe00e800

08002fc0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d151      	bne.n	800307e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fda:	e022      	b.n	8003022 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d01e      	beq.n	8003022 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe4:	f7ff f978 	bl	80022d8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <I2C_IsAcknowledgeFailed+0x3a>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d113      	bne.n	8003022 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e02e      	b.n	8003080 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b20      	cmp	r3, #32
 800302e:	d1d5      	bne.n	8002fdc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2210      	movs	r2, #16
 8003036:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2220      	movs	r2, #32
 800303e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff fe71 	bl	8002d28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <I2C_IsAcknowledgeFailed+0xc8>)
 8003052:	400b      	ands	r3, r1
 8003054:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f043 0204 	orr.w	r2, r3, #4
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	fe00e800 	.word	0xfe00e800

0800308c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	817b      	strh	r3, [r7, #10]
 800309a:	4613      	mov	r3, r2
 800309c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	0d5b      	lsrs	r3, r3, #21
 80030a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030ac:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <I2C_TransferConfig+0x58>)
 80030ae:	430b      	orrs	r3, r1
 80030b0:	43db      	mvns	r3, r3
 80030b2:	ea02 0103 	and.w	r1, r2, r3
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030bc:	7a7b      	ldrb	r3, [r7, #9]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	03ff63ff 	.word	0x03ff63ff

080030e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d138      	bne.n	8003170 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003108:	2302      	movs	r3, #2
 800310a:	e032      	b.n	8003172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800313a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d139      	bne.n	8003208 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800319e:	2302      	movs	r3, #2
 80031a0:	e033      	b.n	800320a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2224      	movs	r2, #36	; 0x24
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <HAL_PWREx_GetVoltageRange+0x18>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40007000 	.word	0x40007000

08003234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003242:	d130      	bne.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800324c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003250:	d038      	beq.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800325a:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2232      	movs	r2, #50	; 0x32
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0c9b      	lsrs	r3, r3, #18
 8003274:	3301      	adds	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003278:	e002      	b.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3b01      	subs	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d102      	bne.n	8003294 <HAL_PWREx_ControlVoltageScaling+0x60>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f2      	bne.n	800327a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a0:	d110      	bne.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e00f      	b.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d007      	beq.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032bc:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40007000 	.word	0x40007000
 80032d8:	20000000 	.word	0x20000000
 80032dc:	431bde83 	.word	0x431bde83

080032e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f000 bc11 	b.w	8003b16 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f4:	4ba0      	ldr	r3, [pc, #640]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032fe:	4b9e      	ldr	r3, [pc, #632]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80e4 	beq.w	80034de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_RCC_OscConfig+0x4c>
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	f040 808b 	bne.w	800343a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b01      	cmp	r3, #1
 8003328:	f040 8087 	bne.w	800343a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800332c:	4b92      	ldr	r3, [pc, #584]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x64>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e3e8      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1a      	ldr	r2, [r3, #32]
 8003348:	4b8b      	ldr	r3, [pc, #556]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <HAL_RCC_OscConfig+0x7e>
 8003354:	4b88      	ldr	r3, [pc, #544]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335c:	e005      	b.n	800336a <HAL_RCC_OscConfig+0x8a>
 800335e:	4b86      	ldr	r3, [pc, #536]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336a:	4293      	cmp	r3, r2
 800336c:	d223      	bcs.n	80033b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fd78 	bl	8003e68 <RCC_SetFlashLatencyFromMSIRange>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e3c9      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003382:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7c      	ldr	r2, [pc, #496]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003388:	f043 0308 	orr.w	r3, r3, #8
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b7a      	ldr	r3, [pc, #488]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4977      	ldr	r1, [pc, #476]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a0:	4b75      	ldr	r3, [pc, #468]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	4972      	ldr	r1, [pc, #456]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
 80033b4:	e025      	b.n	8003402 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b6:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6f      	ldr	r2, [pc, #444]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	496a      	ldr	r1, [pc, #424]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	4965      	ldr	r1, [pc, #404]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fd38 	bl	8003e68 <RCC_SetFlashLatencyFromMSIRange>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e389      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003402:	f000 fc6f 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003406:	4601      	mov	r1, r0
 8003408:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	4a5a      	ldr	r2, [pc, #360]	; (800357c <HAL_RCC_OscConfig+0x29c>)
 8003414:	5cd3      	ldrb	r3, [r2, r3]
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	fa21 f303 	lsr.w	r3, r1, r3
 800341e:	4a58      	ldr	r2, [pc, #352]	; (8003580 <HAL_RCC_OscConfig+0x2a0>)
 8003420:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003422:	4b58      	ldr	r3, [pc, #352]	; (8003584 <HAL_RCC_OscConfig+0x2a4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe ff0a 	bl	8002240 <HAL_InitTick>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d052      	beq.n	80034dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	e36d      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d032      	beq.n	80034a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003442:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344e:	f7fe ff43 	bl	80022d8 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003456:	f7fe ff3f 	bl	80022d8 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e356      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4b40      	ldr	r3, [pc, #256]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a3f      	ldr	r2, [pc, #252]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800347a:	f043 0308 	orr.w	r3, r3, #8
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	493a      	ldr	r1, [pc, #232]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	4935      	ldr	r1, [pc, #212]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
 80034a6:	e01a      	b.n	80034de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034b4:	f7fe ff10 	bl	80022d8 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034bc:	f7fe ff0c 	bl	80022d8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e323      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1dc>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d073      	beq.n	80035d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_OscConfig+0x21c>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d10e      	bne.n	8003514 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d10b      	bne.n	8003514 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d063      	beq.n	80035d0 <HAL_RCC_OscConfig+0x2f0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d15f      	bne.n	80035d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e300      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d106      	bne.n	800352c <HAL_RCC_OscConfig+0x24c>
 800351e:	4b16      	ldr	r3, [pc, #88]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a15      	ldr	r2, [pc, #84]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <HAL_RCC_OscConfig+0x288>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x270>
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0x288>
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a08      	ldr	r2, [pc, #32]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <HAL_RCC_OscConfig+0x298>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe feb2 	bl	80022d8 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003576:	e010      	b.n	800359a <HAL_RCC_OscConfig+0x2ba>
 8003578:	40021000 	.word	0x40021000
 800357c:	08005d98 	.word	0x08005d98
 8003580:	20000000 	.word	0x20000000
 8003584:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fea6 	bl	80022d8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e2bd      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800359a:	4baf      	ldr	r3, [pc, #700]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x2a8>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fe96 	bl	80022d8 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fe92 	bl	80022d8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e2a9      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c2:	4ba5      	ldr	r3, [pc, #660]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x2d0>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d060      	beq.n	80036a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_OscConfig+0x310>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d119      	bne.n	800361e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d116      	bne.n	800361e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f0:	4b99      	ldr	r3, [pc, #612]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_OscConfig+0x328>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e286      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003608:	4b93      	ldr	r3, [pc, #588]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	061b      	lsls	r3, r3, #24
 8003616:	4990      	ldr	r1, [pc, #576]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800361c:	e040      	b.n	80036a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d023      	beq.n	800366e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003626:	4b8c      	ldr	r3, [pc, #560]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a8b      	ldr	r2, [pc, #556]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fe fe51 	bl	80022d8 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363a:	f7fe fe4d 	bl	80022d8 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e264      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364c:	4b82      	ldr	r3, [pc, #520]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003658:	4b7f      	ldr	r3, [pc, #508]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	497c      	ldr	r1, [pc, #496]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
 800366c:	e018      	b.n	80036a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366e:	4b7a      	ldr	r3, [pc, #488]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a79      	ldr	r2, [pc, #484]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 8003674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367a:	f7fe fe2d 	bl	80022d8 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003682:	f7fe fe29 	bl	80022d8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e240      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003694:	4b70      	ldr	r3, [pc, #448]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d03c      	beq.n	8003726 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01c      	beq.n	80036ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b4:	4b68      	ldr	r3, [pc, #416]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ba:	4a67      	ldr	r2, [pc, #412]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe fe08 	bl	80022d8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe fe04 	bl	80022d8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e21b      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036de:	4b5e      	ldr	r3, [pc, #376]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80036e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ef      	beq.n	80036cc <HAL_RCC_OscConfig+0x3ec>
 80036ec:	e01b      	b.n	8003726 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ee:	4b5a      	ldr	r3, [pc, #360]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80036f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f4:	4a58      	ldr	r2, [pc, #352]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fe fdeb 	bl	80022d8 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003706:	f7fe fde7 	bl	80022d8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e1fe      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003718:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800371a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1ef      	bne.n	8003706 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80a6 	beq.w	8003880 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003734:	2300      	movs	r3, #0
 8003736:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003738:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10d      	bne.n	8003760 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	4a43      	ldr	r2, [pc, #268]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	6593      	str	r3, [r2, #88]	; 0x58
 8003750:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375c:	2301      	movs	r3, #1
 800375e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003760:	4b3e      	ldr	r3, [pc, #248]	; (800385c <HAL_RCC_OscConfig+0x57c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d118      	bne.n	800379e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376c:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_RCC_OscConfig+0x57c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3a      	ldr	r2, [pc, #232]	; (800385c <HAL_RCC_OscConfig+0x57c>)
 8003772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003776:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003778:	f7fe fdae 	bl	80022d8 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003780:	f7fe fdaa 	bl	80022d8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1c1      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003792:	4b32      	ldr	r3, [pc, #200]	; (800385c <HAL_RCC_OscConfig+0x57c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d108      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4d8>
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b6:	e024      	b.n	8003802 <HAL_RCC_OscConfig+0x522>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d110      	bne.n	80037e2 <HAL_RCC_OscConfig+0x502>
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	4a24      	ldr	r2, [pc, #144]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e0:	e00f      	b.n	8003802 <HAL_RCC_OscConfig+0x522>
 80037e2:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380a:	f7fe fd65 	bl	80022d8 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003810:	e00a      	b.n	8003828 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fe fd61 	bl	80022d8 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e176      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_OscConfig+0x578>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ed      	beq.n	8003812 <HAL_RCC_OscConfig+0x532>
 8003836:	e01a      	b.n	800386e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe fd4e 	bl	80022d8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800383e:	e00f      	b.n	8003860 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe fd4a 	bl	80022d8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d906      	bls.n	8003860 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e15f      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003860:	4baa      	ldr	r3, [pc, #680]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e8      	bne.n	8003840 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4ba5      	ldr	r3, [pc, #660]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	4aa4      	ldr	r2, [pc, #656]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d03c      	beq.n	8003906 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01c      	beq.n	80038ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003894:	4b9d      	ldr	r3, [pc, #628]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800389a:	4a9c      	ldr	r2, [pc, #624]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fe fd18 	bl	80022d8 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ac:	f7fe fd14 	bl	80022d8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e12b      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038be:	4b93      	ldr	r3, [pc, #588]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 80038c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ef      	beq.n	80038ac <HAL_RCC_OscConfig+0x5cc>
 80038cc:	e01b      	b.n	8003906 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038ce:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 80038d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d4:	4a8d      	ldr	r2, [pc, #564]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fe fcfb 	bl	80022d8 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e6:	f7fe fcf7 	bl	80022d8 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e10e      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f8:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 80038fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ef      	bne.n	80038e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8102 	beq.w	8003b14 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	2b02      	cmp	r3, #2
 8003916:	f040 80c5 	bne.w	8003aa4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800391a:	4b7c      	ldr	r3, [pc, #496]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f003 0203 	and.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	429a      	cmp	r2, r3
 800392c:	d12c      	bne.n	8003988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	3b01      	subs	r3, #1
 800393a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d123      	bne.n	8003988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d11b      	bne.n	8003988 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d113      	bne.n	8003988 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	3b01      	subs	r3, #1
 800396e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d109      	bne.n	8003988 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	3b01      	subs	r3, #1
 8003982:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d067      	beq.n	8003a58 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d062      	beq.n	8003a54 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800398e:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0bb      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800399e:	4b5b      	ldr	r3, [pc, #364]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a5a      	ldr	r2, [pc, #360]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 80039a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039aa:	f7fe fc95 	bl	80022d8 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b2:	f7fe fc91 	bl	80022d8 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0a8      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c4:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f0      	bne.n	80039b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d0:	4b4e      	ldr	r3, [pc, #312]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	4b4e      	ldr	r3, [pc, #312]	; (8003b10 <HAL_RCC_OscConfig+0x830>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039e0:	3a01      	subs	r2, #1
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039ea:	0212      	lsls	r2, r2, #8
 80039ec:	4311      	orrs	r1, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039f2:	0852      	lsrs	r2, r2, #1
 80039f4:	3a01      	subs	r2, #1
 80039f6:	0552      	lsls	r2, r2, #21
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0652      	lsls	r2, r2, #25
 8003a04:	4311      	orrs	r1, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a0a:	06d2      	lsls	r2, r2, #27
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	493f      	ldr	r1, [pc, #252]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a14:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3c      	ldr	r2, [pc, #240]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a20:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a39      	ldr	r2, [pc, #228]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2c:	f7fe fc54 	bl	80022d8 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fe fc50 	bl	80022d8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e067      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a52:	e05f      	b.n	8003b14 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e05e      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a58:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d157      	bne.n	8003b14 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a70:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a7c:	f7fe fc2c 	bl	80022d8 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fe fc28 	bl	80022d8 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e03f      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x7a4>
 8003aa2:	e037      	b.n	8003b14 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d02d      	beq.n	8003b06 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003ac8:	f023 0303 	bic.w	r3, r3, #3
 8003acc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003ad4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe fbfb 	bl	80022d8 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe fbf7 	bl	80022d8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e00e      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCC_OscConfig+0x82c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x806>
 8003b04:	e006      	b.n	8003b14 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e005      	b.n	8003b16 <HAL_RCC_OscConfig+0x836>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop

08003b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0c8      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b66      	ldr	r3, [pc, #408]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b63      	ldr	r3, [pc, #396]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 0207 	bic.w	r2, r3, #7
 8003b4a:	4961      	ldr	r1, [pc, #388]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b5f      	ldr	r3, [pc, #380]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b0      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d04c      	beq.n	8003c0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b78:	4b56      	ldr	r3, [pc, #344]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d121      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e09e      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d115      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e092      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ba8:	4b4a      	ldr	r3, [pc, #296]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e086      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb8:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e07e      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bc8:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 0203 	bic.w	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	493f      	ldr	r1, [pc, #252]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bda:	f7fe fb7d 	bl	80022d8 <HAL_GetTick>
 8003bde:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be2:	f7fe fb79 	bl	80022d8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e066      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf8:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 020c 	and.w	r2, r3, #12
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d1eb      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c16:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	492c      	ldr	r1, [pc, #176]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c28:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d210      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 0207 	bic.w	r2, r3, #7
 8003c3e:	4924      	ldr	r1, [pc, #144]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e036      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4918      	ldr	r1, [pc, #96]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4910      	ldr	r1, [pc, #64]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c96:	f000 f825 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003c9a:	4601      	mov	r1, r0
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_RCC_ClockConfig+0x1b4>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	5cd3      	ldrb	r3, [r2, r3]
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	fa21 f303 	lsr.w	r3, r1, r3
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fac0 	bl	8002240 <HAL_InitTick>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	08005d98 	.word	0x08005d98
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	20000018 	.word	0x20000018

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cfc:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x34>
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d121      	bne.n	8003d56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d11e      	bne.n	8003d56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d18:	4b33      	ldr	r3, [pc, #204]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d24:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	e005      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d40:	4a2a      	ldr	r2, [pc, #168]	; (8003dec <HAL_RCC_GetSysClockFreq+0x108>)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d102      	bne.n	8003d62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	e004      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d68:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d133      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d72:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d002      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0xa4>
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0xaa>
 8003d86:	e005      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d8a:	617b      	str	r3, [r7, #20]
      break;
 8003d8c:	e005      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d8e:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d90:	617b      	str	r3, [r7, #20]
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	617b      	str	r3, [r7, #20]
      break;
 8003d98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	3301      	adds	r3, #1
 8003da6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	fb02 f203 	mul.w	r2, r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dda:	69bb      	ldr	r3, [r7, #24]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3724      	adds	r7, #36	; 0x24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40021000 	.word	0x40021000
 8003dec:	08005db0 	.word	0x08005db0
 8003df0:	00f42400 	.word	0x00f42400
 8003df4:	007a1200 	.word	0x007a1200

08003df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000

08003e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e14:	f7ff fff0 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e18:	4601      	mov	r1, r0
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e26:	5cd3      	ldrb	r3, [r2, r3]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	08005da8 	.word	0x08005da8

08003e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e40:	f7ff ffda 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e44:	4601      	mov	r1, r0
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0adb      	lsrs	r3, r3, #11
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	08005da8 	.word	0x08005da8

08003e68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e70:	2300      	movs	r3, #0
 8003e72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e74:	4b2a      	ldr	r3, [pc, #168]	; (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e80:	f7ff f9ca 	bl	8003218 <HAL_PWREx_GetVoltageRange>
 8003e84:	6178      	str	r0, [r7, #20]
 8003e86:	e014      	b.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e88:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
 8003e94:	4b22      	ldr	r3, [pc, #136]	; (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ea0:	f7ff f9ba 	bl	8003218 <HAL_PWREx_GetVoltageRange>
 8003ea4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb8:	d10b      	bne.n	8003ed2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
 8003ebe:	d919      	bls.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ec4:	d902      	bls.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e013      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ecc:	2301      	movs	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e010      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b80      	cmp	r3, #128	; 0x80
 8003ed6:	d902      	bls.n	8003ede <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ed8:	2303      	movs	r3, #3
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e00a      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d102      	bne.n	8003eea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	e004      	b.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b70      	cmp	r3, #112	; 0x70
 8003eee:	d101      	bne.n	8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 0207 	bic.w	r2, r3, #7
 8003efc:	4909      	ldr	r1, [pc, #36]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d001      	beq.n	8003f16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40022000 	.word	0x40022000

08003f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f30:	2300      	movs	r3, #0
 8003f32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f34:	2300      	movs	r3, #0
 8003f36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02f      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f4c:	d005      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f52:	d015      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003f58:	e00f      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f5a:	4bac      	ldr	r3, [pc, #688]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	4aab      	ldr	r2, [pc, #684]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f66:	e00c      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f9cc 	bl	800430c <RCCEx_PLLSAI1_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f78:	e003      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f7e:	e000      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f88:	4ba0      	ldr	r3, [pc, #640]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	499d      	ldr	r1, [pc, #628]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f9e:	e001      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8099 	beq.w	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fb6:	4b95      	ldr	r3, [pc, #596]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	4b8f      	ldr	r3, [pc, #572]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	4a8e      	ldr	r2, [pc, #568]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd8:	4b8c      	ldr	r3, [pc, #560]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe8:	4b89      	ldr	r3, [pc, #548]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a88      	ldr	r2, [pc, #544]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff4:	f7fe f970 	bl	80022d8 <HAL_GetTick>
 8003ff8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ffa:	e009      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fe f96c 	bl	80022d8 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d902      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	74fb      	strb	r3, [r7, #19]
        break;
 800400e:	e005      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004010:	4b7f      	ldr	r3, [pc, #508]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ef      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800401c:	7cfb      	ldrb	r3, [r7, #19]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d155      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004022:	4b7a      	ldr	r3, [pc, #488]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	429a      	cmp	r2, r3
 800403c:	d019      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800403e:	4b73      	ldr	r3, [pc, #460]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800404a:	4b70      	ldr	r3, [pc, #448]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	4a6e      	ldr	r2, [pc, #440]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800405a:	4b6c      	ldr	r3, [pc, #432]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	4a6a      	ldr	r2, [pc, #424]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800406a:	4a68      	ldr	r2, [pc, #416]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d016      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe f92c 	bl	80022d8 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004082:	e00b      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fe f928 	bl	80022d8 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d902      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	74fb      	strb	r3, [r7, #19]
            break;
 800409a:	e006      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409c:	4b5b      	ldr	r3, [pc, #364]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ec      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b0:	4b56      	ldr	r3, [pc, #344]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	4953      	ldr	r1, [pc, #332]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040c6:	e004      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
 80040cc:	e001      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d2:	7c7b      	ldrb	r3, [r7, #17]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d8:	4b4c      	ldr	r3, [pc, #304]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	4a4b      	ldr	r2, [pc, #300]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040f0:	4b46      	ldr	r3, [pc, #280]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	4943      	ldr	r1, [pc, #268]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004112:	4b3e      	ldr	r3, [pc, #248]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 020c 	bic.w	r2, r3, #12
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	493a      	ldr	r1, [pc, #232]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004134:	4b35      	ldr	r3, [pc, #212]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	4932      	ldr	r1, [pc, #200]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004156:	4b2d      	ldr	r3, [pc, #180]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	4929      	ldr	r1, [pc, #164]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	4921      	ldr	r1, [pc, #132]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	4918      	ldr	r1, [pc, #96]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041bc:	4b13      	ldr	r3, [pc, #76]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4910      	ldr	r1, [pc, #64]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d02c      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	4907      	ldr	r1, [pc, #28]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041fc:	d10a      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041fe:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	4a02      	ldr	r2, [pc, #8]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004208:	60d3      	str	r3, [r2, #12]
 800420a:	e015      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800420c:	40021000 	.word	0x40021000
 8004210:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800421c:	d10c      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f871 	bl	800430c <RCCEx_PLLSAI1_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800422e:	7cfb      	ldrb	r3, [r7, #19]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d028      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004244:	4b30      	ldr	r3, [pc, #192]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	492d      	ldr	r1, [pc, #180]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004262:	d106      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004264:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a27      	ldr	r2, [pc, #156]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800426e:	60d3      	str	r3, [r2, #12]
 8004270:	e011      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800427a:	d10c      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	2101      	movs	r1, #1
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f842 	bl	800430c <RCCEx_PLLSAI1_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8004292:	7cfb      	ldrb	r3, [r7, #19]
 8004294:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01c      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042a2:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b0:	4915      	ldr	r1, [pc, #84]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f81f 	bl	800430c <RCCEx_PLLSAI1_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f6:	4904      	ldr	r1, [pc, #16]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000

0800430c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800431a:	4b73      	ldr	r3, [pc, #460]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004326:	4b70      	ldr	r3, [pc, #448]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d10d      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
       ||
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800433e:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
       ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d044      	beq.n	80043dc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e041      	b.n	80043dc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d00c      	beq.n	800437a <RCCEx_PLLSAI1_Config+0x6e>
 8004360:	2b03      	cmp	r3, #3
 8004362:	d013      	beq.n	800438c <RCCEx_PLLSAI1_Config+0x80>
 8004364:	2b01      	cmp	r3, #1
 8004366:	d120      	bne.n	80043aa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004368:	4b5f      	ldr	r3, [pc, #380]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11d      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004378:	e01a      	b.n	80043b0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800437a:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	2b00      	cmp	r3, #0
 8004384:	d116      	bne.n	80043b4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800438a:	e013      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800438c:	4b56      	ldr	r3, [pc, #344]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10f      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004398:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043a8:	e006      	b.n	80043b8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
      break;
 80043ae:	e004      	b.n	80043ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043b0:	bf00      	nop
 80043b2:	e002      	b.n	80043ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80043b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043c0:	4b49      	ldr	r3, [pc, #292]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6819      	ldr	r1, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	430b      	orrs	r3, r1
 80043d6:	4944      	ldr	r1, [pc, #272]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d17c      	bne.n	80044dc <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ee:	f7fd ff73 	bl	80022d8 <HAL_GetTick>
 80043f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043f4:	e009      	b.n	800440a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f6:	f7fd ff6f 	bl	80022d8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d902      	bls.n	800440a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	73fb      	strb	r3, [r7, #15]
        break;
 8004408:	e005      	b.n	8004416 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800440a:	4b37      	ldr	r3, [pc, #220]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1ef      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d15f      	bne.n	80044dc <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d110      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800442a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6892      	ldr	r2, [r2, #8]
 8004432:	0211      	lsls	r1, r2, #8
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68d2      	ldr	r2, [r2, #12]
 8004438:	06d2      	lsls	r2, r2, #27
 800443a:	430a      	orrs	r2, r1
 800443c:	492a      	ldr	r1, [pc, #168]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	610b      	str	r3, [r1, #16]
 8004442:	e027      	b.n	8004494 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d112      	bne.n	8004470 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800444a:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004452:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6892      	ldr	r2, [r2, #8]
 800445a:	0211      	lsls	r1, r2, #8
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6912      	ldr	r2, [r2, #16]
 8004460:	0852      	lsrs	r2, r2, #1
 8004462:	3a01      	subs	r2, #1
 8004464:	0552      	lsls	r2, r2, #21
 8004466:	430a      	orrs	r2, r1
 8004468:	491f      	ldr	r1, [pc, #124]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	610b      	str	r3, [r1, #16]
 800446e:	e011      	b.n	8004494 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004478:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6892      	ldr	r2, [r2, #8]
 8004480:	0211      	lsls	r1, r2, #8
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6952      	ldr	r2, [r2, #20]
 8004486:	0852      	lsrs	r2, r2, #1
 8004488:	3a01      	subs	r2, #1
 800448a:	0652      	lsls	r2, r2, #25
 800448c:	430a      	orrs	r2, r1
 800448e:	4916      	ldr	r1, [pc, #88]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004490:	4313      	orrs	r3, r2
 8004492:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004494:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800449a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800449e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fd ff1a 	bl	80022d8 <HAL_GetTick>
 80044a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044a6:	e009      	b.n	80044bc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a8:	f7fd ff16 	bl	80022d8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d902      	bls.n	80044bc <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	73fb      	strb	r3, [r7, #15]
          break;
 80044ba:	e005      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ef      	beq.n	80044a8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	4904      	ldr	r1, [pc, #16]	; (80044e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e040      	b.n	8004580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fc fe06 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8c0 	bl	80046b0 <UART_SetConfig>
 8004530:	4603      	mov	r3, r0
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e022      	b.n	8004580 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fb9a 	bl	8004c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fc21 	bl	8004dc0 <UART_CheckIdleState>
 800457e:	4603      	mov	r3, r0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	2b20      	cmp	r3, #32
 800459e:	f040 8081 	bne.w	80046a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_UART_Transmit+0x26>
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e079      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_UART_Transmit+0x38>
 80045bc:	2302      	movs	r3, #2
 80045be:	e072      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2221      	movs	r2, #33	; 0x21
 80045d2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80045d4:	f7fd fe80 	bl	80022d8 <HAL_GetTick>
 80045d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f2:	d108      	bne.n	8004606 <HAL_UART_Transmit+0x7e>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d104      	bne.n	8004606 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e003      	b.n	800460e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004616:	e02d      	b.n	8004674 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2200      	movs	r2, #0
 8004620:	2180      	movs	r1, #128	; 0x80
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fc11 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e039      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10b      	bne.n	8004650 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	881a      	ldrh	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004644:	b292      	uxth	r2, r2
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	3302      	adds	r3, #2
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e008      	b.n	8004662 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b292      	uxth	r2, r2
 800465a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3301      	adds	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1cb      	bne.n	8004618 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2200      	movs	r2, #0
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fbdd 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e005      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80046b4:	b08a      	sub	sp, #40	; 0x28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4313      	orrs	r3, r2
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4bb3      	ldr	r3, [pc, #716]	; (80049b4 <UART_SetConfig+0x304>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4aa9      	ldr	r2, [pc, #676]	; (80049b8 <UART_SetConfig+0x308>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471e:	4313      	orrs	r3, r2
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4aa0      	ldr	r2, [pc, #640]	; (80049bc <UART_SetConfig+0x30c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d126      	bne.n	800478e <UART_SetConfig+0xde>
 8004740:	4b9f      	ldr	r3, [pc, #636]	; (80049c0 <UART_SetConfig+0x310>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d81a      	bhi.n	8004784 <UART_SetConfig+0xd4>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0xa4>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004765 	.word	0x08004765
 8004758:	08004775 	.word	0x08004775
 800475c:	0800476d 	.word	0x0800476d
 8004760:	0800477d 	.word	0x0800477d
 8004764:	2301      	movs	r3, #1
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476a:	e080      	b.n	800486e <UART_SetConfig+0x1be>
 800476c:	2302      	movs	r3, #2
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004772:	e07c      	b.n	800486e <UART_SetConfig+0x1be>
 8004774:	2304      	movs	r3, #4
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477a:	e078      	b.n	800486e <UART_SetConfig+0x1be>
 800477c:	2308      	movs	r3, #8
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e074      	b.n	800486e <UART_SetConfig+0x1be>
 8004784:	2310      	movs	r3, #16
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	bf00      	nop
 800478c:	e06f      	b.n	800486e <UART_SetConfig+0x1be>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a8c      	ldr	r2, [pc, #560]	; (80049c4 <UART_SetConfig+0x314>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d138      	bne.n	800480a <UART_SetConfig+0x15a>
 8004798:	4b89      	ldr	r3, [pc, #548]	; (80049c0 <UART_SetConfig+0x310>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d82c      	bhi.n	8004800 <UART_SetConfig+0x150>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0xfc>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047e1 	.word	0x080047e1
 80047b0:	08004801 	.word	0x08004801
 80047b4:	08004801 	.word	0x08004801
 80047b8:	08004801 	.word	0x08004801
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	08004801 	.word	0x08004801
 80047c4:	08004801 	.word	0x08004801
 80047c8:	08004801 	.word	0x08004801
 80047cc:	080047e9 	.word	0x080047e9
 80047d0:	08004801 	.word	0x08004801
 80047d4:	08004801 	.word	0x08004801
 80047d8:	08004801 	.word	0x08004801
 80047dc:	080047f9 	.word	0x080047f9
 80047e0:	2300      	movs	r3, #0
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e6:	e042      	b.n	800486e <UART_SetConfig+0x1be>
 80047e8:	2302      	movs	r3, #2
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ee:	e03e      	b.n	800486e <UART_SetConfig+0x1be>
 80047f0:	2304      	movs	r3, #4
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e03a      	b.n	800486e <UART_SetConfig+0x1be>
 80047f8:	2308      	movs	r3, #8
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e036      	b.n	800486e <UART_SetConfig+0x1be>
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	bf00      	nop
 8004808:	e031      	b.n	800486e <UART_SetConfig+0x1be>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6a      	ldr	r2, [pc, #424]	; (80049b8 <UART_SetConfig+0x308>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d129      	bne.n	8004868 <UART_SetConfig+0x1b8>
 8004814:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <UART_SetConfig+0x310>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d014      	beq.n	800484e <UART_SetConfig+0x19e>
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004828:	d802      	bhi.n	8004830 <UART_SetConfig+0x180>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <UART_SetConfig+0x18e>
 800482e:	e016      	b.n	800485e <UART_SetConfig+0x1ae>
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004834:	d007      	beq.n	8004846 <UART_SetConfig+0x196>
 8004836:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800483a:	d00c      	beq.n	8004856 <UART_SetConfig+0x1a6>
 800483c:	e00f      	b.n	800485e <UART_SetConfig+0x1ae>
 800483e:	2300      	movs	r3, #0
 8004840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004844:	e013      	b.n	800486e <UART_SetConfig+0x1be>
 8004846:	2302      	movs	r3, #2
 8004848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484c:	e00f      	b.n	800486e <UART_SetConfig+0x1be>
 800484e:	2304      	movs	r3, #4
 8004850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004854:	e00b      	b.n	800486e <UART_SetConfig+0x1be>
 8004856:	2308      	movs	r3, #8
 8004858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485c:	e007      	b.n	800486e <UART_SetConfig+0x1be>
 800485e:	2310      	movs	r3, #16
 8004860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004864:	bf00      	nop
 8004866:	e002      	b.n	800486e <UART_SetConfig+0x1be>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a51      	ldr	r2, [pc, #324]	; (80049b8 <UART_SetConfig+0x308>)
 8004874:	4293      	cmp	r3, r2
 8004876:	f040 80fa 	bne.w	8004a6e <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800487a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800487e:	2b08      	cmp	r3, #8
 8004880:	d823      	bhi.n	80048ca <UART_SetConfig+0x21a>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x1d8>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048cb 	.word	0x080048cb
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048cb 	.word	0x080048cb
 8004898:	080048bb 	.word	0x080048bb
 800489c:	080048cb 	.word	0x080048cb
 80048a0:	080048cb 	.word	0x080048cb
 80048a4:	080048cb 	.word	0x080048cb
 80048a8:	080048c3 	.word	0x080048c3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7ff fab0 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 80048b0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048b2:	e00d      	b.n	80048d0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80048b4:	4b44      	ldr	r3, [pc, #272]	; (80049c8 <UART_SetConfig+0x318>)
 80048b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048b8:	e00a      	b.n	80048d0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80048ba:	f7ff fa13 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 80048be:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048c0:	e006      	b.n	80048d0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048c8:	e002      	b.n	80048d0 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	76fb      	strb	r3, [r7, #27]
        break;
 80048ce:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 81c6 	beq.w	8004c64 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d305      	bcc.n	80048f4 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d902      	bls.n	80048fa <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	e1b4      	b.n	8004c64 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80048fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048fe:	2b08      	cmp	r3, #8
 8004900:	f200 80a2 	bhi.w	8004a48 <UART_SetConfig+0x398>
 8004904:	a201      	add	r2, pc, #4	; (adr r2, 800490c <UART_SetConfig+0x25c>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	08004931 	.word	0x08004931
 8004910:	08004a49 	.word	0x08004a49
 8004914:	0800497f 	.word	0x0800497f
 8004918:	08004a49 	.word	0x08004a49
 800491c:	080049d1 	.word	0x080049d1
 8004920:	08004a49 	.word	0x08004a49
 8004924:	08004a49 	.word	0x08004a49
 8004928:	08004a49 	.word	0x08004a49
 800492c:	08004a1f 	.word	0x08004a1f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7ff fa6e 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004934:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4619      	mov	r1, r3
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	f04f 0400 	mov.w	r4, #0
 8004946:	0214      	lsls	r4, r2, #8
 8004948:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800494c:	020b      	lsls	r3, r1, #8
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6852      	ldr	r2, [r2, #4]
 8004952:	0852      	lsrs	r2, r2, #1
 8004954:	4611      	mov	r1, r2
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	eb13 0b01 	adds.w	fp, r3, r1
 800495e:	eb44 0c02 	adc.w	ip, r4, r2
 8004962:	4658      	mov	r0, fp
 8004964:	4661      	mov	r1, ip
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f04f 0400 	mov.w	r4, #0
 800496e:	461a      	mov	r2, r3
 8004970:	4623      	mov	r3, r4
 8004972:	f7fc f86b 	bl	8000a4c <__aeabi_uldivmod>
 8004976:	4603      	mov	r3, r0
 8004978:	460c      	mov	r4, r1
 800497a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800497c:	e067      	b.n	8004a4e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	f04f 0400 	mov.w	r4, #0
 8004988:	4910      	ldr	r1, [pc, #64]	; (80049cc <UART_SetConfig+0x31c>)
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	eb13 0b01 	adds.w	fp, r3, r1
 8004992:	eb44 0c02 	adc.w	ip, r4, r2
 8004996:	4658      	mov	r0, fp
 8004998:	4661      	mov	r1, ip
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f04f 0400 	mov.w	r4, #0
 80049a2:	461a      	mov	r2, r3
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7fc f851 	bl	8000a4c <__aeabi_uldivmod>
 80049aa:	4603      	mov	r3, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80049b0:	e04d      	b.n	8004a4e <UART_SetConfig+0x39e>
 80049b2:	bf00      	nop
 80049b4:	efff69f3 	.word	0xefff69f3
 80049b8:	40008000 	.word	0x40008000
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40004400 	.word	0x40004400
 80049c8:	00f42400 	.word	0x00f42400
 80049cc:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80049d0:	f7ff f988 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 80049d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4619      	mov	r1, r3
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	f04f 0400 	mov.w	r4, #0
 80049e6:	0214      	lsls	r4, r2, #8
 80049e8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80049ec:	020b      	lsls	r3, r1, #8
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6852      	ldr	r2, [r2, #4]
 80049f2:	0852      	lsrs	r2, r2, #1
 80049f4:	4611      	mov	r1, r2
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	eb13 0b01 	adds.w	fp, r3, r1
 80049fe:	eb44 0c02 	adc.w	ip, r4, r2
 8004a02:	4658      	mov	r0, fp
 8004a04:	4661      	mov	r1, ip
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f04f 0400 	mov.w	r4, #0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	4623      	mov	r3, r4
 8004a12:	f7fc f81b 	bl	8000a4c <__aeabi_uldivmod>
 8004a16:	4603      	mov	r3, r0
 8004a18:	460c      	mov	r4, r1
 8004a1a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a1c:	e017      	b.n	8004a4e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	f04f 0400 	mov.w	r4, #0
 8004a28:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004a2c:	f144 0100 	adc.w	r1, r4, #0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f04f 0400 	mov.w	r4, #0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	f7fc f806 	bl	8000a4c <__aeabi_uldivmod>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a46:	e002      	b.n	8004a4e <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	76fb      	strb	r3, [r7, #27]
            break;
 8004a4c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a54:	d308      	bcc.n	8004a68 <UART_SetConfig+0x3b8>
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5c:	d204      	bcs.n	8004a68 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	e0fd      	b.n	8004c64 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	76fb      	strb	r3, [r7, #27]
 8004a6c:	e0fa      	b.n	8004c64 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a76:	f040 8083 	bne.w	8004b80 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 8004a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d85e      	bhi.n	8004b40 <UART_SetConfig+0x490>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <UART_SetConfig+0x3d8>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004acd 	.word	0x08004acd
 8004a90:	08004aed 	.word	0x08004aed
 8004a94:	08004b41 	.word	0x08004b41
 8004a98:	08004b09 	.word	0x08004b09
 8004a9c:	08004b41 	.word	0x08004b41
 8004aa0:	08004b41 	.word	0x08004b41
 8004aa4:	08004b41 	.word	0x08004b41
 8004aa8:	08004b29 	.word	0x08004b29
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aac:	f7ff f9b0 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004ab0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	005a      	lsls	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	441a      	add	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aca:	e03c      	b.n	8004b46 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7ff f9b6 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 8004ad0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	005a      	lsls	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	441a      	add	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aea:	e02c      	b.n	8004b46 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004af6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6852      	ldr	r2, [r2, #4]
 8004afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b06:	e01e      	b.n	8004b46 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b08:	f7ff f8ec 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8004b0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	005a      	lsls	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	441a      	add	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b26:	e00e      	b.n	8004b46 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b3e:	e002      	b.n	8004b46 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	76fb      	strb	r3, [r7, #27]
        break;
 8004b44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	2b0f      	cmp	r3, #15
 8004b4a:	d916      	bls.n	8004b7a <UART_SetConfig+0x4ca>
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b52:	d212      	bcs.n	8004b7a <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f023 030f 	bic.w	r3, r3, #15
 8004b5c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	89fb      	ldrh	r3, [r7, #14]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	89fa      	ldrh	r2, [r7, #14]
 8004b76:	60da      	str	r2, [r3, #12]
 8004b78:	e074      	b.n	8004c64 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	76fb      	strb	r3, [r7, #27]
 8004b7e:	e071      	b.n	8004c64 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8004b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d85c      	bhi.n	8004c42 <UART_SetConfig+0x592>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x4e0>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bd3 	.word	0x08004bd3
 8004b98:	08004bf1 	.word	0x08004bf1
 8004b9c:	08004c43 	.word	0x08004c43
 8004ba0:	08004c0d 	.word	0x08004c0d
 8004ba4:	08004c43 	.word	0x08004c43
 8004ba8:	08004c43 	.word	0x08004c43
 8004bac:	08004c43 	.word	0x08004c43
 8004bb0:	08004c2b 	.word	0x08004c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7ff f92c 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	085a      	lsrs	r2, r3, #1
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bd0:	e03a      	b.n	8004c48 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd2:	f7ff f933 	bl	8003e3c <HAL_RCC_GetPCLK2Freq>
 8004bd6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085a      	lsrs	r2, r3, #1
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	441a      	add	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bee:	e02b      	b.n	8004c48 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004bfa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6852      	ldr	r2, [r2, #4]
 8004c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c0a:	e01d      	b.n	8004c48 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0c:	f7ff f86a 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8004c10:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	085a      	lsrs	r2, r3, #1
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c28:	e00e      	b.n	8004c48 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c40:	e002      	b.n	8004c48 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	76fb      	strb	r3, [r7, #27]
        break;
 8004c46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	d908      	bls.n	8004c60 <UART_SetConfig+0x5b0>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c54:	d204      	bcs.n	8004c60 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	e001      	b.n	8004c64 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c70:	7efb      	ldrb	r3, [r7, #27]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	; 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7a:	d10a      	bne.n	8004d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dce:	f7fd fa83 	bl	80022d8 <HAL_GetTick>
 8004dd2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d10e      	bne.n	8004e00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f82a 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e020      	b.n	8004e42 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d10e      	bne.n	8004e2c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f814 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e00a      	b.n	8004e42 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5a:	e05d      	b.n	8004f18 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d059      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e64:	f7fd fa38 	bl	80022d8 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11b      	bne.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e042      	b.n	8004f38 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02b      	beq.n	8004f18 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ece:	d123      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ee8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e00f      	b.n	8004f38 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69da      	ldr	r2, [r3, #28]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d092      	beq.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <__errno>:
 8004f40:	4b01      	ldr	r3, [pc, #4]	; (8004f48 <__errno+0x8>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000020 	.word	0x20000020

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4e0d      	ldr	r6, [pc, #52]	; (8004f84 <__libc_init_array+0x38>)
 8004f50:	4c0d      	ldr	r4, [pc, #52]	; (8004f88 <__libc_init_array+0x3c>)
 8004f52:	1ba4      	subs	r4, r4, r6
 8004f54:	10a4      	asrs	r4, r4, #2
 8004f56:	2500      	movs	r5, #0
 8004f58:	42a5      	cmp	r5, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	4e0b      	ldr	r6, [pc, #44]	; (8004f8c <__libc_init_array+0x40>)
 8004f5e:	4c0c      	ldr	r4, [pc, #48]	; (8004f90 <__libc_init_array+0x44>)
 8004f60:	f000 ff04 	bl	8005d6c <_init>
 8004f64:	1ba4      	subs	r4, r4, r6
 8004f66:	10a4      	asrs	r4, r4, #2
 8004f68:	2500      	movs	r5, #0
 8004f6a:	42a5      	cmp	r5, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f74:	4798      	blx	r3
 8004f76:	3501      	adds	r5, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f7e:	4798      	blx	r3
 8004f80:	3501      	adds	r5, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	08005ef4 	.word	0x08005ef4
 8004f88:	08005ef4 	.word	0x08005ef4
 8004f8c:	08005ef4 	.word	0x08005ef4
 8004f90:	08005ef8 	.word	0x08005ef8

08004f94 <memset>:
 8004f94:	4402      	add	r2, r0
 8004f96:	4603      	mov	r3, r0
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d100      	bne.n	8004f9e <memset+0xa>
 8004f9c:	4770      	bx	lr
 8004f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004fa2:	e7f9      	b.n	8004f98 <memset+0x4>

08004fa4 <iprintf>:
 8004fa4:	b40f      	push	{r0, r1, r2, r3}
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <iprintf+0x2c>)
 8004fa8:	b513      	push	{r0, r1, r4, lr}
 8004faa:	681c      	ldr	r4, [r3, #0]
 8004fac:	b124      	cbz	r4, 8004fb8 <iprintf+0x14>
 8004fae:	69a3      	ldr	r3, [r4, #24]
 8004fb0:	b913      	cbnz	r3, 8004fb8 <iprintf+0x14>
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f000 f84e 	bl	8005054 <__sinit>
 8004fb8:	ab05      	add	r3, sp, #20
 8004fba:	9a04      	ldr	r2, [sp, #16]
 8004fbc:	68a1      	ldr	r1, [r4, #8]
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 f955 	bl	8005270 <_vfiprintf_r>
 8004fc6:	b002      	add	sp, #8
 8004fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fcc:	b004      	add	sp, #16
 8004fce:	4770      	bx	lr
 8004fd0:	20000020 	.word	0x20000020

08004fd4 <std>:
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	b510      	push	{r4, lr}
 8004fd8:	4604      	mov	r4, r0
 8004fda:	e9c0 3300 	strd	r3, r3, [r0]
 8004fde:	6083      	str	r3, [r0, #8]
 8004fe0:	8181      	strh	r1, [r0, #12]
 8004fe2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fe4:	81c2      	strh	r2, [r0, #14]
 8004fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fea:	6183      	str	r3, [r0, #24]
 8004fec:	4619      	mov	r1, r3
 8004fee:	2208      	movs	r2, #8
 8004ff0:	305c      	adds	r0, #92	; 0x5c
 8004ff2:	f7ff ffcf 	bl	8004f94 <memset>
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <std+0x38>)
 8004ff8:	6263      	str	r3, [r4, #36]	; 0x24
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <std+0x3c>)
 8004ffc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <std+0x40>)
 8005000:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <std+0x44>)
 8005004:	6224      	str	r4, [r4, #32]
 8005006:	6323      	str	r3, [r4, #48]	; 0x30
 8005008:	bd10      	pop	{r4, pc}
 800500a:	bf00      	nop
 800500c:	080057cd 	.word	0x080057cd
 8005010:	080057ef 	.word	0x080057ef
 8005014:	08005827 	.word	0x08005827
 8005018:	0800584b 	.word	0x0800584b

0800501c <_cleanup_r>:
 800501c:	4901      	ldr	r1, [pc, #4]	; (8005024 <_cleanup_r+0x8>)
 800501e:	f000 b885 	b.w	800512c <_fwalk_reent>
 8005022:	bf00      	nop
 8005024:	08005b25 	.word	0x08005b25

08005028 <__sfmoreglue>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	1e4a      	subs	r2, r1, #1
 800502c:	2568      	movs	r5, #104	; 0x68
 800502e:	4355      	muls	r5, r2
 8005030:	460e      	mov	r6, r1
 8005032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005036:	f000 f897 	bl	8005168 <_malloc_r>
 800503a:	4604      	mov	r4, r0
 800503c:	b140      	cbz	r0, 8005050 <__sfmoreglue+0x28>
 800503e:	2100      	movs	r1, #0
 8005040:	e9c0 1600 	strd	r1, r6, [r0]
 8005044:	300c      	adds	r0, #12
 8005046:	60a0      	str	r0, [r4, #8]
 8005048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800504c:	f7ff ffa2 	bl	8004f94 <memset>
 8005050:	4620      	mov	r0, r4
 8005052:	bd70      	pop	{r4, r5, r6, pc}

08005054 <__sinit>:
 8005054:	6983      	ldr	r3, [r0, #24]
 8005056:	b510      	push	{r4, lr}
 8005058:	4604      	mov	r4, r0
 800505a:	bb33      	cbnz	r3, 80050aa <__sinit+0x56>
 800505c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005060:	6503      	str	r3, [r0, #80]	; 0x50
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <__sinit+0x58>)
 8005064:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <__sinit+0x5c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6282      	str	r2, [r0, #40]	; 0x28
 800506a:	4298      	cmp	r0, r3
 800506c:	bf04      	itt	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	6183      	streq	r3, [r0, #24]
 8005072:	f000 f81f 	bl	80050b4 <__sfp>
 8005076:	6060      	str	r0, [r4, #4]
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f81b 	bl	80050b4 <__sfp>
 800507e:	60a0      	str	r0, [r4, #8]
 8005080:	4620      	mov	r0, r4
 8005082:	f000 f817 	bl	80050b4 <__sfp>
 8005086:	2200      	movs	r2, #0
 8005088:	60e0      	str	r0, [r4, #12]
 800508a:	2104      	movs	r1, #4
 800508c:	6860      	ldr	r0, [r4, #4]
 800508e:	f7ff ffa1 	bl	8004fd4 <std>
 8005092:	2201      	movs	r2, #1
 8005094:	2109      	movs	r1, #9
 8005096:	68a0      	ldr	r0, [r4, #8]
 8005098:	f7ff ff9c 	bl	8004fd4 <std>
 800509c:	2202      	movs	r2, #2
 800509e:	2112      	movs	r1, #18
 80050a0:	68e0      	ldr	r0, [r4, #12]
 80050a2:	f7ff ff97 	bl	8004fd4 <std>
 80050a6:	2301      	movs	r3, #1
 80050a8:	61a3      	str	r3, [r4, #24]
 80050aa:	bd10      	pop	{r4, pc}
 80050ac:	08005e54 	.word	0x08005e54
 80050b0:	0800501d 	.word	0x0800501d

080050b4 <__sfp>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <__sfp+0x70>)
 80050b8:	681e      	ldr	r6, [r3, #0]
 80050ba:	69b3      	ldr	r3, [r6, #24]
 80050bc:	4607      	mov	r7, r0
 80050be:	b913      	cbnz	r3, 80050c6 <__sfp+0x12>
 80050c0:	4630      	mov	r0, r6
 80050c2:	f7ff ffc7 	bl	8005054 <__sinit>
 80050c6:	3648      	adds	r6, #72	; 0x48
 80050c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	d503      	bpl.n	80050d8 <__sfp+0x24>
 80050d0:	6833      	ldr	r3, [r6, #0]
 80050d2:	b133      	cbz	r3, 80050e2 <__sfp+0x2e>
 80050d4:	6836      	ldr	r6, [r6, #0]
 80050d6:	e7f7      	b.n	80050c8 <__sfp+0x14>
 80050d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050dc:	b16d      	cbz	r5, 80050fa <__sfp+0x46>
 80050de:	3468      	adds	r4, #104	; 0x68
 80050e0:	e7f4      	b.n	80050cc <__sfp+0x18>
 80050e2:	2104      	movs	r1, #4
 80050e4:	4638      	mov	r0, r7
 80050e6:	f7ff ff9f 	bl	8005028 <__sfmoreglue>
 80050ea:	6030      	str	r0, [r6, #0]
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1f1      	bne.n	80050d4 <__sfp+0x20>
 80050f0:	230c      	movs	r3, #12
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4604      	mov	r4, r0
 80050f6:	4620      	mov	r0, r4
 80050f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <__sfp+0x74>)
 80050fc:	6665      	str	r5, [r4, #100]	; 0x64
 80050fe:	e9c4 5500 	strd	r5, r5, [r4]
 8005102:	60a5      	str	r5, [r4, #8]
 8005104:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005108:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800510c:	2208      	movs	r2, #8
 800510e:	4629      	mov	r1, r5
 8005110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005114:	f7ff ff3e 	bl	8004f94 <memset>
 8005118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800511c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005120:	e7e9      	b.n	80050f6 <__sfp+0x42>
 8005122:	bf00      	nop
 8005124:	08005e54 	.word	0x08005e54
 8005128:	ffff0001 	.word	0xffff0001

0800512c <_fwalk_reent>:
 800512c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005130:	4680      	mov	r8, r0
 8005132:	4689      	mov	r9, r1
 8005134:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005138:	2600      	movs	r6, #0
 800513a:	b914      	cbnz	r4, 8005142 <_fwalk_reent+0x16>
 800513c:	4630      	mov	r0, r6
 800513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005142:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005146:	3f01      	subs	r7, #1
 8005148:	d501      	bpl.n	800514e <_fwalk_reent+0x22>
 800514a:	6824      	ldr	r4, [r4, #0]
 800514c:	e7f5      	b.n	800513a <_fwalk_reent+0xe>
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d907      	bls.n	8005164 <_fwalk_reent+0x38>
 8005154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005158:	3301      	adds	r3, #1
 800515a:	d003      	beq.n	8005164 <_fwalk_reent+0x38>
 800515c:	4629      	mov	r1, r5
 800515e:	4640      	mov	r0, r8
 8005160:	47c8      	blx	r9
 8005162:	4306      	orrs	r6, r0
 8005164:	3568      	adds	r5, #104	; 0x68
 8005166:	e7ee      	b.n	8005146 <_fwalk_reent+0x1a>

08005168 <_malloc_r>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	1ccd      	adds	r5, r1, #3
 800516c:	f025 0503 	bic.w	r5, r5, #3
 8005170:	3508      	adds	r5, #8
 8005172:	2d0c      	cmp	r5, #12
 8005174:	bf38      	it	cc
 8005176:	250c      	movcc	r5, #12
 8005178:	2d00      	cmp	r5, #0
 800517a:	4606      	mov	r6, r0
 800517c:	db01      	blt.n	8005182 <_malloc_r+0x1a>
 800517e:	42a9      	cmp	r1, r5
 8005180:	d903      	bls.n	800518a <_malloc_r+0x22>
 8005182:	230c      	movs	r3, #12
 8005184:	6033      	str	r3, [r6, #0]
 8005186:	2000      	movs	r0, #0
 8005188:	bd70      	pop	{r4, r5, r6, pc}
 800518a:	f000 fd6b 	bl	8005c64 <__malloc_lock>
 800518e:	4a21      	ldr	r2, [pc, #132]	; (8005214 <_malloc_r+0xac>)
 8005190:	6814      	ldr	r4, [r2, #0]
 8005192:	4621      	mov	r1, r4
 8005194:	b991      	cbnz	r1, 80051bc <_malloc_r+0x54>
 8005196:	4c20      	ldr	r4, [pc, #128]	; (8005218 <_malloc_r+0xb0>)
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	b91b      	cbnz	r3, 80051a4 <_malloc_r+0x3c>
 800519c:	4630      	mov	r0, r6
 800519e:	f000 fb05 	bl	80057ac <_sbrk_r>
 80051a2:	6020      	str	r0, [r4, #0]
 80051a4:	4629      	mov	r1, r5
 80051a6:	4630      	mov	r0, r6
 80051a8:	f000 fb00 	bl	80057ac <_sbrk_r>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d124      	bne.n	80051fa <_malloc_r+0x92>
 80051b0:	230c      	movs	r3, #12
 80051b2:	6033      	str	r3, [r6, #0]
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 fd56 	bl	8005c66 <__malloc_unlock>
 80051ba:	e7e4      	b.n	8005186 <_malloc_r+0x1e>
 80051bc:	680b      	ldr	r3, [r1, #0]
 80051be:	1b5b      	subs	r3, r3, r5
 80051c0:	d418      	bmi.n	80051f4 <_malloc_r+0x8c>
 80051c2:	2b0b      	cmp	r3, #11
 80051c4:	d90f      	bls.n	80051e6 <_malloc_r+0x7e>
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	50cd      	str	r5, [r1, r3]
 80051ca:	18cc      	adds	r4, r1, r3
 80051cc:	4630      	mov	r0, r6
 80051ce:	f000 fd4a 	bl	8005c66 <__malloc_unlock>
 80051d2:	f104 000b 	add.w	r0, r4, #11
 80051d6:	1d23      	adds	r3, r4, #4
 80051d8:	f020 0007 	bic.w	r0, r0, #7
 80051dc:	1ac3      	subs	r3, r0, r3
 80051de:	d0d3      	beq.n	8005188 <_malloc_r+0x20>
 80051e0:	425a      	negs	r2, r3
 80051e2:	50e2      	str	r2, [r4, r3]
 80051e4:	e7d0      	b.n	8005188 <_malloc_r+0x20>
 80051e6:	428c      	cmp	r4, r1
 80051e8:	684b      	ldr	r3, [r1, #4]
 80051ea:	bf16      	itet	ne
 80051ec:	6063      	strne	r3, [r4, #4]
 80051ee:	6013      	streq	r3, [r2, #0]
 80051f0:	460c      	movne	r4, r1
 80051f2:	e7eb      	b.n	80051cc <_malloc_r+0x64>
 80051f4:	460c      	mov	r4, r1
 80051f6:	6849      	ldr	r1, [r1, #4]
 80051f8:	e7cc      	b.n	8005194 <_malloc_r+0x2c>
 80051fa:	1cc4      	adds	r4, r0, #3
 80051fc:	f024 0403 	bic.w	r4, r4, #3
 8005200:	42a0      	cmp	r0, r4
 8005202:	d005      	beq.n	8005210 <_malloc_r+0xa8>
 8005204:	1a21      	subs	r1, r4, r0
 8005206:	4630      	mov	r0, r6
 8005208:	f000 fad0 	bl	80057ac <_sbrk_r>
 800520c:	3001      	adds	r0, #1
 800520e:	d0cf      	beq.n	80051b0 <_malloc_r+0x48>
 8005210:	6025      	str	r5, [r4, #0]
 8005212:	e7db      	b.n	80051cc <_malloc_r+0x64>
 8005214:	200000d8 	.word	0x200000d8
 8005218:	200000dc 	.word	0x200000dc

0800521c <__sfputc_r>:
 800521c:	6893      	ldr	r3, [r2, #8]
 800521e:	3b01      	subs	r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	b410      	push	{r4}
 8005224:	6093      	str	r3, [r2, #8]
 8005226:	da08      	bge.n	800523a <__sfputc_r+0x1e>
 8005228:	6994      	ldr	r4, [r2, #24]
 800522a:	42a3      	cmp	r3, r4
 800522c:	db01      	blt.n	8005232 <__sfputc_r+0x16>
 800522e:	290a      	cmp	r1, #10
 8005230:	d103      	bne.n	800523a <__sfputc_r+0x1e>
 8005232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005236:	f000 bb0d 	b.w	8005854 <__swbuf_r>
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	1c58      	adds	r0, r3, #1
 800523e:	6010      	str	r0, [r2, #0]
 8005240:	7019      	strb	r1, [r3, #0]
 8005242:	4608      	mov	r0, r1
 8005244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005248:	4770      	bx	lr

0800524a <__sfputs_r>:
 800524a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524c:	4606      	mov	r6, r0
 800524e:	460f      	mov	r7, r1
 8005250:	4614      	mov	r4, r2
 8005252:	18d5      	adds	r5, r2, r3
 8005254:	42ac      	cmp	r4, r5
 8005256:	d101      	bne.n	800525c <__sfputs_r+0x12>
 8005258:	2000      	movs	r0, #0
 800525a:	e007      	b.n	800526c <__sfputs_r+0x22>
 800525c:	463a      	mov	r2, r7
 800525e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005262:	4630      	mov	r0, r6
 8005264:	f7ff ffda 	bl	800521c <__sfputc_r>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d1f3      	bne.n	8005254 <__sfputs_r+0xa>
 800526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005270 <_vfiprintf_r>:
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	460c      	mov	r4, r1
 8005276:	b09d      	sub	sp, #116	; 0x74
 8005278:	4617      	mov	r7, r2
 800527a:	461d      	mov	r5, r3
 800527c:	4606      	mov	r6, r0
 800527e:	b118      	cbz	r0, 8005288 <_vfiprintf_r+0x18>
 8005280:	6983      	ldr	r3, [r0, #24]
 8005282:	b90b      	cbnz	r3, 8005288 <_vfiprintf_r+0x18>
 8005284:	f7ff fee6 	bl	8005054 <__sinit>
 8005288:	4b7c      	ldr	r3, [pc, #496]	; (800547c <_vfiprintf_r+0x20c>)
 800528a:	429c      	cmp	r4, r3
 800528c:	d158      	bne.n	8005340 <_vfiprintf_r+0xd0>
 800528e:	6874      	ldr	r4, [r6, #4]
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	0718      	lsls	r0, r3, #28
 8005294:	d55e      	bpl.n	8005354 <_vfiprintf_r+0xe4>
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d05b      	beq.n	8005354 <_vfiprintf_r+0xe4>
 800529c:	2300      	movs	r3, #0
 800529e:	9309      	str	r3, [sp, #36]	; 0x24
 80052a0:	2320      	movs	r3, #32
 80052a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052a6:	2330      	movs	r3, #48	; 0x30
 80052a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ac:	9503      	str	r5, [sp, #12]
 80052ae:	f04f 0b01 	mov.w	fp, #1
 80052b2:	46b8      	mov	r8, r7
 80052b4:	4645      	mov	r5, r8
 80052b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80052ba:	b10b      	cbz	r3, 80052c0 <_vfiprintf_r+0x50>
 80052bc:	2b25      	cmp	r3, #37	; 0x25
 80052be:	d154      	bne.n	800536a <_vfiprintf_r+0xfa>
 80052c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80052c4:	d00b      	beq.n	80052de <_vfiprintf_r+0x6e>
 80052c6:	4653      	mov	r3, sl
 80052c8:	463a      	mov	r2, r7
 80052ca:	4621      	mov	r1, r4
 80052cc:	4630      	mov	r0, r6
 80052ce:	f7ff ffbc 	bl	800524a <__sfputs_r>
 80052d2:	3001      	adds	r0, #1
 80052d4:	f000 80c2 	beq.w	800545c <_vfiprintf_r+0x1ec>
 80052d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052da:	4453      	add	r3, sl
 80052dc:	9309      	str	r3, [sp, #36]	; 0x24
 80052de:	f898 3000 	ldrb.w	r3, [r8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80ba 	beq.w	800545c <_vfiprintf_r+0x1ec>
 80052e8:	2300      	movs	r3, #0
 80052ea:	f04f 32ff 	mov.w	r2, #4294967295
 80052ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052f2:	9304      	str	r3, [sp, #16]
 80052f4:	9307      	str	r3, [sp, #28]
 80052f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052fa:	931a      	str	r3, [sp, #104]	; 0x68
 80052fc:	46a8      	mov	r8, r5
 80052fe:	2205      	movs	r2, #5
 8005300:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005304:	485e      	ldr	r0, [pc, #376]	; (8005480 <_vfiprintf_r+0x210>)
 8005306:	f7fa ff63 	bl	80001d0 <memchr>
 800530a:	9b04      	ldr	r3, [sp, #16]
 800530c:	bb78      	cbnz	r0, 800536e <_vfiprintf_r+0xfe>
 800530e:	06d9      	lsls	r1, r3, #27
 8005310:	bf44      	itt	mi
 8005312:	2220      	movmi	r2, #32
 8005314:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005318:	071a      	lsls	r2, r3, #28
 800531a:	bf44      	itt	mi
 800531c:	222b      	movmi	r2, #43	; 0x2b
 800531e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005322:	782a      	ldrb	r2, [r5, #0]
 8005324:	2a2a      	cmp	r2, #42	; 0x2a
 8005326:	d02a      	beq.n	800537e <_vfiprintf_r+0x10e>
 8005328:	9a07      	ldr	r2, [sp, #28]
 800532a:	46a8      	mov	r8, r5
 800532c:	2000      	movs	r0, #0
 800532e:	250a      	movs	r5, #10
 8005330:	4641      	mov	r1, r8
 8005332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005336:	3b30      	subs	r3, #48	; 0x30
 8005338:	2b09      	cmp	r3, #9
 800533a:	d969      	bls.n	8005410 <_vfiprintf_r+0x1a0>
 800533c:	b360      	cbz	r0, 8005398 <_vfiprintf_r+0x128>
 800533e:	e024      	b.n	800538a <_vfiprintf_r+0x11a>
 8005340:	4b50      	ldr	r3, [pc, #320]	; (8005484 <_vfiprintf_r+0x214>)
 8005342:	429c      	cmp	r4, r3
 8005344:	d101      	bne.n	800534a <_vfiprintf_r+0xda>
 8005346:	68b4      	ldr	r4, [r6, #8]
 8005348:	e7a2      	b.n	8005290 <_vfiprintf_r+0x20>
 800534a:	4b4f      	ldr	r3, [pc, #316]	; (8005488 <_vfiprintf_r+0x218>)
 800534c:	429c      	cmp	r4, r3
 800534e:	bf08      	it	eq
 8005350:	68f4      	ldreq	r4, [r6, #12]
 8005352:	e79d      	b.n	8005290 <_vfiprintf_r+0x20>
 8005354:	4621      	mov	r1, r4
 8005356:	4630      	mov	r0, r6
 8005358:	f000 fae0 	bl	800591c <__swsetup_r>
 800535c:	2800      	cmp	r0, #0
 800535e:	d09d      	beq.n	800529c <_vfiprintf_r+0x2c>
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	b01d      	add	sp, #116	; 0x74
 8005366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536a:	46a8      	mov	r8, r5
 800536c:	e7a2      	b.n	80052b4 <_vfiprintf_r+0x44>
 800536e:	4a44      	ldr	r2, [pc, #272]	; (8005480 <_vfiprintf_r+0x210>)
 8005370:	1a80      	subs	r0, r0, r2
 8005372:	fa0b f000 	lsl.w	r0, fp, r0
 8005376:	4318      	orrs	r0, r3
 8005378:	9004      	str	r0, [sp, #16]
 800537a:	4645      	mov	r5, r8
 800537c:	e7be      	b.n	80052fc <_vfiprintf_r+0x8c>
 800537e:	9a03      	ldr	r2, [sp, #12]
 8005380:	1d11      	adds	r1, r2, #4
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	9103      	str	r1, [sp, #12]
 8005386:	2a00      	cmp	r2, #0
 8005388:	db01      	blt.n	800538e <_vfiprintf_r+0x11e>
 800538a:	9207      	str	r2, [sp, #28]
 800538c:	e004      	b.n	8005398 <_vfiprintf_r+0x128>
 800538e:	4252      	negs	r2, r2
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	9207      	str	r2, [sp, #28]
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	f898 3000 	ldrb.w	r3, [r8]
 800539c:	2b2e      	cmp	r3, #46	; 0x2e
 800539e:	d10e      	bne.n	80053be <_vfiprintf_r+0x14e>
 80053a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80053a4:	2b2a      	cmp	r3, #42	; 0x2a
 80053a6:	d138      	bne.n	800541a <_vfiprintf_r+0x1aa>
 80053a8:	9b03      	ldr	r3, [sp, #12]
 80053aa:	1d1a      	adds	r2, r3, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	9203      	str	r2, [sp, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bfb8      	it	lt
 80053b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80053b8:	f108 0802 	add.w	r8, r8, #2
 80053bc:	9305      	str	r3, [sp, #20]
 80053be:	4d33      	ldr	r5, [pc, #204]	; (800548c <_vfiprintf_r+0x21c>)
 80053c0:	f898 1000 	ldrb.w	r1, [r8]
 80053c4:	2203      	movs	r2, #3
 80053c6:	4628      	mov	r0, r5
 80053c8:	f7fa ff02 	bl	80001d0 <memchr>
 80053cc:	b140      	cbz	r0, 80053e0 <_vfiprintf_r+0x170>
 80053ce:	2340      	movs	r3, #64	; 0x40
 80053d0:	1b40      	subs	r0, r0, r5
 80053d2:	fa03 f000 	lsl.w	r0, r3, r0
 80053d6:	9b04      	ldr	r3, [sp, #16]
 80053d8:	4303      	orrs	r3, r0
 80053da:	f108 0801 	add.w	r8, r8, #1
 80053de:	9304      	str	r3, [sp, #16]
 80053e0:	f898 1000 	ldrb.w	r1, [r8]
 80053e4:	482a      	ldr	r0, [pc, #168]	; (8005490 <_vfiprintf_r+0x220>)
 80053e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053ea:	2206      	movs	r2, #6
 80053ec:	f108 0701 	add.w	r7, r8, #1
 80053f0:	f7fa feee 	bl	80001d0 <memchr>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d037      	beq.n	8005468 <_vfiprintf_r+0x1f8>
 80053f8:	4b26      	ldr	r3, [pc, #152]	; (8005494 <_vfiprintf_r+0x224>)
 80053fa:	bb1b      	cbnz	r3, 8005444 <_vfiprintf_r+0x1d4>
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	3307      	adds	r3, #7
 8005400:	f023 0307 	bic.w	r3, r3, #7
 8005404:	3308      	adds	r3, #8
 8005406:	9303      	str	r3, [sp, #12]
 8005408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800540a:	444b      	add	r3, r9
 800540c:	9309      	str	r3, [sp, #36]	; 0x24
 800540e:	e750      	b.n	80052b2 <_vfiprintf_r+0x42>
 8005410:	fb05 3202 	mla	r2, r5, r2, r3
 8005414:	2001      	movs	r0, #1
 8005416:	4688      	mov	r8, r1
 8005418:	e78a      	b.n	8005330 <_vfiprintf_r+0xc0>
 800541a:	2300      	movs	r3, #0
 800541c:	f108 0801 	add.w	r8, r8, #1
 8005420:	9305      	str	r3, [sp, #20]
 8005422:	4619      	mov	r1, r3
 8005424:	250a      	movs	r5, #10
 8005426:	4640      	mov	r0, r8
 8005428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800542c:	3a30      	subs	r2, #48	; 0x30
 800542e:	2a09      	cmp	r2, #9
 8005430:	d903      	bls.n	800543a <_vfiprintf_r+0x1ca>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0c3      	beq.n	80053be <_vfiprintf_r+0x14e>
 8005436:	9105      	str	r1, [sp, #20]
 8005438:	e7c1      	b.n	80053be <_vfiprintf_r+0x14e>
 800543a:	fb05 2101 	mla	r1, r5, r1, r2
 800543e:	2301      	movs	r3, #1
 8005440:	4680      	mov	r8, r0
 8005442:	e7f0      	b.n	8005426 <_vfiprintf_r+0x1b6>
 8005444:	ab03      	add	r3, sp, #12
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4622      	mov	r2, r4
 800544a:	4b13      	ldr	r3, [pc, #76]	; (8005498 <_vfiprintf_r+0x228>)
 800544c:	a904      	add	r1, sp, #16
 800544e:	4630      	mov	r0, r6
 8005450:	f3af 8000 	nop.w
 8005454:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005458:	4681      	mov	r9, r0
 800545a:	d1d5      	bne.n	8005408 <_vfiprintf_r+0x198>
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	065b      	lsls	r3, r3, #25
 8005460:	f53f af7e 	bmi.w	8005360 <_vfiprintf_r+0xf0>
 8005464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005466:	e77d      	b.n	8005364 <_vfiprintf_r+0xf4>
 8005468:	ab03      	add	r3, sp, #12
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	4622      	mov	r2, r4
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <_vfiprintf_r+0x228>)
 8005470:	a904      	add	r1, sp, #16
 8005472:	4630      	mov	r0, r6
 8005474:	f000 f888 	bl	8005588 <_printf_i>
 8005478:	e7ec      	b.n	8005454 <_vfiprintf_r+0x1e4>
 800547a:	bf00      	nop
 800547c:	08005e78 	.word	0x08005e78
 8005480:	08005eb8 	.word	0x08005eb8
 8005484:	08005e98 	.word	0x08005e98
 8005488:	08005e58 	.word	0x08005e58
 800548c:	08005ebe 	.word	0x08005ebe
 8005490:	08005ec2 	.word	0x08005ec2
 8005494:	00000000 	.word	0x00000000
 8005498:	0800524b 	.word	0x0800524b

0800549c <_printf_common>:
 800549c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	4691      	mov	r9, r2
 80054a2:	461f      	mov	r7, r3
 80054a4:	688a      	ldr	r2, [r1, #8]
 80054a6:	690b      	ldr	r3, [r1, #16]
 80054a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054ac:	4293      	cmp	r3, r2
 80054ae:	bfb8      	it	lt
 80054b0:	4613      	movlt	r3, r2
 80054b2:	f8c9 3000 	str.w	r3, [r9]
 80054b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054ba:	4606      	mov	r6, r0
 80054bc:	460c      	mov	r4, r1
 80054be:	b112      	cbz	r2, 80054c6 <_printf_common+0x2a>
 80054c0:	3301      	adds	r3, #1
 80054c2:	f8c9 3000 	str.w	r3, [r9]
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	0699      	lsls	r1, r3, #26
 80054ca:	bf42      	ittt	mi
 80054cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054d0:	3302      	addmi	r3, #2
 80054d2:	f8c9 3000 	strmi.w	r3, [r9]
 80054d6:	6825      	ldr	r5, [r4, #0]
 80054d8:	f015 0506 	ands.w	r5, r5, #6
 80054dc:	d107      	bne.n	80054ee <_printf_common+0x52>
 80054de:	f104 0a19 	add.w	sl, r4, #25
 80054e2:	68e3      	ldr	r3, [r4, #12]
 80054e4:	f8d9 2000 	ldr.w	r2, [r9]
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	42ab      	cmp	r3, r5
 80054ec:	dc28      	bgt.n	8005540 <_printf_common+0xa4>
 80054ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	3300      	adds	r3, #0
 80054f6:	bf18      	it	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	0692      	lsls	r2, r2, #26
 80054fc:	d42d      	bmi.n	800555a <_printf_common+0xbe>
 80054fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005502:	4639      	mov	r1, r7
 8005504:	4630      	mov	r0, r6
 8005506:	47c0      	blx	r8
 8005508:	3001      	adds	r0, #1
 800550a:	d020      	beq.n	800554e <_printf_common+0xb2>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	68e5      	ldr	r5, [r4, #12]
 8005510:	f8d9 2000 	ldr.w	r2, [r9]
 8005514:	f003 0306 	and.w	r3, r3, #6
 8005518:	2b04      	cmp	r3, #4
 800551a:	bf08      	it	eq
 800551c:	1aad      	subeq	r5, r5, r2
 800551e:	68a3      	ldr	r3, [r4, #8]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	bf0c      	ite	eq
 8005524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005528:	2500      	movne	r5, #0
 800552a:	4293      	cmp	r3, r2
 800552c:	bfc4      	itt	gt
 800552e:	1a9b      	subgt	r3, r3, r2
 8005530:	18ed      	addgt	r5, r5, r3
 8005532:	f04f 0900 	mov.w	r9, #0
 8005536:	341a      	adds	r4, #26
 8005538:	454d      	cmp	r5, r9
 800553a:	d11a      	bne.n	8005572 <_printf_common+0xd6>
 800553c:	2000      	movs	r0, #0
 800553e:	e008      	b.n	8005552 <_printf_common+0xb6>
 8005540:	2301      	movs	r3, #1
 8005542:	4652      	mov	r2, sl
 8005544:	4639      	mov	r1, r7
 8005546:	4630      	mov	r0, r6
 8005548:	47c0      	blx	r8
 800554a:	3001      	adds	r0, #1
 800554c:	d103      	bne.n	8005556 <_printf_common+0xba>
 800554e:	f04f 30ff 	mov.w	r0, #4294967295
 8005552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005556:	3501      	adds	r5, #1
 8005558:	e7c3      	b.n	80054e2 <_printf_common+0x46>
 800555a:	18e1      	adds	r1, r4, r3
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	2030      	movs	r0, #48	; 0x30
 8005560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005564:	4422      	add	r2, r4
 8005566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800556a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800556e:	3302      	adds	r3, #2
 8005570:	e7c5      	b.n	80054fe <_printf_common+0x62>
 8005572:	2301      	movs	r3, #1
 8005574:	4622      	mov	r2, r4
 8005576:	4639      	mov	r1, r7
 8005578:	4630      	mov	r0, r6
 800557a:	47c0      	blx	r8
 800557c:	3001      	adds	r0, #1
 800557e:	d0e6      	beq.n	800554e <_printf_common+0xb2>
 8005580:	f109 0901 	add.w	r9, r9, #1
 8005584:	e7d8      	b.n	8005538 <_printf_common+0x9c>
	...

08005588 <_printf_i>:
 8005588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800558c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005590:	460c      	mov	r4, r1
 8005592:	7e09      	ldrb	r1, [r1, #24]
 8005594:	b085      	sub	sp, #20
 8005596:	296e      	cmp	r1, #110	; 0x6e
 8005598:	4617      	mov	r7, r2
 800559a:	4606      	mov	r6, r0
 800559c:	4698      	mov	r8, r3
 800559e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055a0:	f000 80b3 	beq.w	800570a <_printf_i+0x182>
 80055a4:	d822      	bhi.n	80055ec <_printf_i+0x64>
 80055a6:	2963      	cmp	r1, #99	; 0x63
 80055a8:	d036      	beq.n	8005618 <_printf_i+0x90>
 80055aa:	d80a      	bhi.n	80055c2 <_printf_i+0x3a>
 80055ac:	2900      	cmp	r1, #0
 80055ae:	f000 80b9 	beq.w	8005724 <_printf_i+0x19c>
 80055b2:	2958      	cmp	r1, #88	; 0x58
 80055b4:	f000 8083 	beq.w	80056be <_printf_i+0x136>
 80055b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80055c0:	e032      	b.n	8005628 <_printf_i+0xa0>
 80055c2:	2964      	cmp	r1, #100	; 0x64
 80055c4:	d001      	beq.n	80055ca <_printf_i+0x42>
 80055c6:	2969      	cmp	r1, #105	; 0x69
 80055c8:	d1f6      	bne.n	80055b8 <_printf_i+0x30>
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	6813      	ldr	r3, [r2, #0]
 80055ce:	0605      	lsls	r5, r0, #24
 80055d0:	f103 0104 	add.w	r1, r3, #4
 80055d4:	d52a      	bpl.n	800562c <_printf_i+0xa4>
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6011      	str	r1, [r2, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da03      	bge.n	80055e6 <_printf_i+0x5e>
 80055de:	222d      	movs	r2, #45	; 0x2d
 80055e0:	425b      	negs	r3, r3
 80055e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055e6:	486f      	ldr	r0, [pc, #444]	; (80057a4 <_printf_i+0x21c>)
 80055e8:	220a      	movs	r2, #10
 80055ea:	e039      	b.n	8005660 <_printf_i+0xd8>
 80055ec:	2973      	cmp	r1, #115	; 0x73
 80055ee:	f000 809d 	beq.w	800572c <_printf_i+0x1a4>
 80055f2:	d808      	bhi.n	8005606 <_printf_i+0x7e>
 80055f4:	296f      	cmp	r1, #111	; 0x6f
 80055f6:	d020      	beq.n	800563a <_printf_i+0xb2>
 80055f8:	2970      	cmp	r1, #112	; 0x70
 80055fa:	d1dd      	bne.n	80055b8 <_printf_i+0x30>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	f043 0320 	orr.w	r3, r3, #32
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	e003      	b.n	800560e <_printf_i+0x86>
 8005606:	2975      	cmp	r1, #117	; 0x75
 8005608:	d017      	beq.n	800563a <_printf_i+0xb2>
 800560a:	2978      	cmp	r1, #120	; 0x78
 800560c:	d1d4      	bne.n	80055b8 <_printf_i+0x30>
 800560e:	2378      	movs	r3, #120	; 0x78
 8005610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005614:	4864      	ldr	r0, [pc, #400]	; (80057a8 <_printf_i+0x220>)
 8005616:	e055      	b.n	80056c4 <_printf_i+0x13c>
 8005618:	6813      	ldr	r3, [r2, #0]
 800561a:	1d19      	adds	r1, r3, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6011      	str	r1, [r2, #0]
 8005620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005628:	2301      	movs	r3, #1
 800562a:	e08c      	b.n	8005746 <_printf_i+0x1be>
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6011      	str	r1, [r2, #0]
 8005630:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005634:	bf18      	it	ne
 8005636:	b21b      	sxthne	r3, r3
 8005638:	e7cf      	b.n	80055da <_printf_i+0x52>
 800563a:	6813      	ldr	r3, [r2, #0]
 800563c:	6825      	ldr	r5, [r4, #0]
 800563e:	1d18      	adds	r0, r3, #4
 8005640:	6010      	str	r0, [r2, #0]
 8005642:	0628      	lsls	r0, r5, #24
 8005644:	d501      	bpl.n	800564a <_printf_i+0xc2>
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	e002      	b.n	8005650 <_printf_i+0xc8>
 800564a:	0668      	lsls	r0, r5, #25
 800564c:	d5fb      	bpl.n	8005646 <_printf_i+0xbe>
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	4854      	ldr	r0, [pc, #336]	; (80057a4 <_printf_i+0x21c>)
 8005652:	296f      	cmp	r1, #111	; 0x6f
 8005654:	bf14      	ite	ne
 8005656:	220a      	movne	r2, #10
 8005658:	2208      	moveq	r2, #8
 800565a:	2100      	movs	r1, #0
 800565c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005660:	6865      	ldr	r5, [r4, #4]
 8005662:	60a5      	str	r5, [r4, #8]
 8005664:	2d00      	cmp	r5, #0
 8005666:	f2c0 8095 	blt.w	8005794 <_printf_i+0x20c>
 800566a:	6821      	ldr	r1, [r4, #0]
 800566c:	f021 0104 	bic.w	r1, r1, #4
 8005670:	6021      	str	r1, [r4, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d13d      	bne.n	80056f2 <_printf_i+0x16a>
 8005676:	2d00      	cmp	r5, #0
 8005678:	f040 808e 	bne.w	8005798 <_printf_i+0x210>
 800567c:	4665      	mov	r5, ip
 800567e:	2a08      	cmp	r2, #8
 8005680:	d10b      	bne.n	800569a <_printf_i+0x112>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	07db      	lsls	r3, r3, #31
 8005686:	d508      	bpl.n	800569a <_printf_i+0x112>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	6862      	ldr	r2, [r4, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	bfde      	ittt	le
 8005690:	2330      	movle	r3, #48	; 0x30
 8005692:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005696:	f105 35ff 	addle.w	r5, r5, #4294967295
 800569a:	ebac 0305 	sub.w	r3, ip, r5
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	f8cd 8000 	str.w	r8, [sp]
 80056a4:	463b      	mov	r3, r7
 80056a6:	aa03      	add	r2, sp, #12
 80056a8:	4621      	mov	r1, r4
 80056aa:	4630      	mov	r0, r6
 80056ac:	f7ff fef6 	bl	800549c <_printf_common>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d14d      	bne.n	8005750 <_printf_i+0x1c8>
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	b005      	add	sp, #20
 80056ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056be:	4839      	ldr	r0, [pc, #228]	; (80057a4 <_printf_i+0x21c>)
 80056c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80056c4:	6813      	ldr	r3, [r2, #0]
 80056c6:	6821      	ldr	r1, [r4, #0]
 80056c8:	1d1d      	adds	r5, r3, #4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6015      	str	r5, [r2, #0]
 80056ce:	060a      	lsls	r2, r1, #24
 80056d0:	d50b      	bpl.n	80056ea <_printf_i+0x162>
 80056d2:	07ca      	lsls	r2, r1, #31
 80056d4:	bf44      	itt	mi
 80056d6:	f041 0120 	orrmi.w	r1, r1, #32
 80056da:	6021      	strmi	r1, [r4, #0]
 80056dc:	b91b      	cbnz	r3, 80056e6 <_printf_i+0x15e>
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	f022 0220 	bic.w	r2, r2, #32
 80056e4:	6022      	str	r2, [r4, #0]
 80056e6:	2210      	movs	r2, #16
 80056e8:	e7b7      	b.n	800565a <_printf_i+0xd2>
 80056ea:	064d      	lsls	r5, r1, #25
 80056ec:	bf48      	it	mi
 80056ee:	b29b      	uxthmi	r3, r3
 80056f0:	e7ef      	b.n	80056d2 <_printf_i+0x14a>
 80056f2:	4665      	mov	r5, ip
 80056f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80056f8:	fb02 3311 	mls	r3, r2, r1, r3
 80056fc:	5cc3      	ldrb	r3, [r0, r3]
 80056fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005702:	460b      	mov	r3, r1
 8005704:	2900      	cmp	r1, #0
 8005706:	d1f5      	bne.n	80056f4 <_printf_i+0x16c>
 8005708:	e7b9      	b.n	800567e <_printf_i+0xf6>
 800570a:	6813      	ldr	r3, [r2, #0]
 800570c:	6825      	ldr	r5, [r4, #0]
 800570e:	6961      	ldr	r1, [r4, #20]
 8005710:	1d18      	adds	r0, r3, #4
 8005712:	6010      	str	r0, [r2, #0]
 8005714:	0628      	lsls	r0, r5, #24
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	d501      	bpl.n	800571e <_printf_i+0x196>
 800571a:	6019      	str	r1, [r3, #0]
 800571c:	e002      	b.n	8005724 <_printf_i+0x19c>
 800571e:	066a      	lsls	r2, r5, #25
 8005720:	d5fb      	bpl.n	800571a <_printf_i+0x192>
 8005722:	8019      	strh	r1, [r3, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	4665      	mov	r5, ip
 800572a:	e7b9      	b.n	80056a0 <_printf_i+0x118>
 800572c:	6813      	ldr	r3, [r2, #0]
 800572e:	1d19      	adds	r1, r3, #4
 8005730:	6011      	str	r1, [r2, #0]
 8005732:	681d      	ldr	r5, [r3, #0]
 8005734:	6862      	ldr	r2, [r4, #4]
 8005736:	2100      	movs	r1, #0
 8005738:	4628      	mov	r0, r5
 800573a:	f7fa fd49 	bl	80001d0 <memchr>
 800573e:	b108      	cbz	r0, 8005744 <_printf_i+0x1bc>
 8005740:	1b40      	subs	r0, r0, r5
 8005742:	6060      	str	r0, [r4, #4]
 8005744:	6863      	ldr	r3, [r4, #4]
 8005746:	6123      	str	r3, [r4, #16]
 8005748:	2300      	movs	r3, #0
 800574a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574e:	e7a7      	b.n	80056a0 <_printf_i+0x118>
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	462a      	mov	r2, r5
 8005754:	4639      	mov	r1, r7
 8005756:	4630      	mov	r0, r6
 8005758:	47c0      	blx	r8
 800575a:	3001      	adds	r0, #1
 800575c:	d0aa      	beq.n	80056b4 <_printf_i+0x12c>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	079b      	lsls	r3, r3, #30
 8005762:	d413      	bmi.n	800578c <_printf_i+0x204>
 8005764:	68e0      	ldr	r0, [r4, #12]
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	4298      	cmp	r0, r3
 800576a:	bfb8      	it	lt
 800576c:	4618      	movlt	r0, r3
 800576e:	e7a3      	b.n	80056b8 <_printf_i+0x130>
 8005770:	2301      	movs	r3, #1
 8005772:	464a      	mov	r2, r9
 8005774:	4639      	mov	r1, r7
 8005776:	4630      	mov	r0, r6
 8005778:	47c0      	blx	r8
 800577a:	3001      	adds	r0, #1
 800577c:	d09a      	beq.n	80056b4 <_printf_i+0x12c>
 800577e:	3501      	adds	r5, #1
 8005780:	68e3      	ldr	r3, [r4, #12]
 8005782:	9a03      	ldr	r2, [sp, #12]
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	42ab      	cmp	r3, r5
 8005788:	dcf2      	bgt.n	8005770 <_printf_i+0x1e8>
 800578a:	e7eb      	b.n	8005764 <_printf_i+0x1dc>
 800578c:	2500      	movs	r5, #0
 800578e:	f104 0919 	add.w	r9, r4, #25
 8005792:	e7f5      	b.n	8005780 <_printf_i+0x1f8>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ac      	bne.n	80056f2 <_printf_i+0x16a>
 8005798:	7803      	ldrb	r3, [r0, #0]
 800579a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800579e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a2:	e76c      	b.n	800567e <_printf_i+0xf6>
 80057a4:	08005ec9 	.word	0x08005ec9
 80057a8:	08005eda 	.word	0x08005eda

080057ac <_sbrk_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4c06      	ldr	r4, [pc, #24]	; (80057c8 <_sbrk_r+0x1c>)
 80057b0:	2300      	movs	r3, #0
 80057b2:	4605      	mov	r5, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	f7fb fd74 	bl	80012a4 <_sbrk>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_sbrk_r+0x1a>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_sbrk_r+0x1a>
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	200002b8 	.word	0x200002b8

080057cc <__sread>:
 80057cc:	b510      	push	{r4, lr}
 80057ce:	460c      	mov	r4, r1
 80057d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d4:	f000 fa96 	bl	8005d04 <_read_r>
 80057d8:	2800      	cmp	r0, #0
 80057da:	bfab      	itete	ge
 80057dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057de:	89a3      	ldrhlt	r3, [r4, #12]
 80057e0:	181b      	addge	r3, r3, r0
 80057e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057e6:	bfac      	ite	ge
 80057e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80057ea:	81a3      	strhlt	r3, [r4, #12]
 80057ec:	bd10      	pop	{r4, pc}

080057ee <__swrite>:
 80057ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f2:	461f      	mov	r7, r3
 80057f4:	898b      	ldrh	r3, [r1, #12]
 80057f6:	05db      	lsls	r3, r3, #23
 80057f8:	4605      	mov	r5, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	4616      	mov	r6, r2
 80057fe:	d505      	bpl.n	800580c <__swrite+0x1e>
 8005800:	2302      	movs	r3, #2
 8005802:	2200      	movs	r2, #0
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	f000 f9b6 	bl	8005b78 <_lseek_r>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	4632      	mov	r2, r6
 800581a:	463b      	mov	r3, r7
 800581c:	4628      	mov	r0, r5
 800581e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005822:	f000 b869 	b.w	80058f8 <_write_r>

08005826 <__sseek>:
 8005826:	b510      	push	{r4, lr}
 8005828:	460c      	mov	r4, r1
 800582a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582e:	f000 f9a3 	bl	8005b78 <_lseek_r>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	bf15      	itete	ne
 8005838:	6560      	strne	r0, [r4, #84]	; 0x54
 800583a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800583e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005842:	81a3      	strheq	r3, [r4, #12]
 8005844:	bf18      	it	ne
 8005846:	81a3      	strhne	r3, [r4, #12]
 8005848:	bd10      	pop	{r4, pc}

0800584a <__sclose>:
 800584a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584e:	f000 b8d3 	b.w	80059f8 <_close_r>
	...

08005854 <__swbuf_r>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	460e      	mov	r6, r1
 8005858:	4614      	mov	r4, r2
 800585a:	4605      	mov	r5, r0
 800585c:	b118      	cbz	r0, 8005866 <__swbuf_r+0x12>
 800585e:	6983      	ldr	r3, [r0, #24]
 8005860:	b90b      	cbnz	r3, 8005866 <__swbuf_r+0x12>
 8005862:	f7ff fbf7 	bl	8005054 <__sinit>
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <__swbuf_r+0x98>)
 8005868:	429c      	cmp	r4, r3
 800586a:	d12a      	bne.n	80058c2 <__swbuf_r+0x6e>
 800586c:	686c      	ldr	r4, [r5, #4]
 800586e:	69a3      	ldr	r3, [r4, #24]
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	071a      	lsls	r2, r3, #28
 8005876:	d52e      	bpl.n	80058d6 <__swbuf_r+0x82>
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	b363      	cbz	r3, 80058d6 <__swbuf_r+0x82>
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	1ac0      	subs	r0, r0, r3
 8005882:	6963      	ldr	r3, [r4, #20]
 8005884:	b2f6      	uxtb	r6, r6
 8005886:	4283      	cmp	r3, r0
 8005888:	4637      	mov	r7, r6
 800588a:	dc04      	bgt.n	8005896 <__swbuf_r+0x42>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f948 	bl	8005b24 <_fflush_r>
 8005894:	bb28      	cbnz	r0, 80058e2 <__swbuf_r+0x8e>
 8005896:	68a3      	ldr	r3, [r4, #8]
 8005898:	3b01      	subs	r3, #1
 800589a:	60a3      	str	r3, [r4, #8]
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	6022      	str	r2, [r4, #0]
 80058a2:	701e      	strb	r6, [r3, #0]
 80058a4:	6963      	ldr	r3, [r4, #20]
 80058a6:	3001      	adds	r0, #1
 80058a8:	4283      	cmp	r3, r0
 80058aa:	d004      	beq.n	80058b6 <__swbuf_r+0x62>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	07db      	lsls	r3, r3, #31
 80058b0:	d519      	bpl.n	80058e6 <__swbuf_r+0x92>
 80058b2:	2e0a      	cmp	r6, #10
 80058b4:	d117      	bne.n	80058e6 <__swbuf_r+0x92>
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 f933 	bl	8005b24 <_fflush_r>
 80058be:	b190      	cbz	r0, 80058e6 <__swbuf_r+0x92>
 80058c0:	e00f      	b.n	80058e2 <__swbuf_r+0x8e>
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <__swbuf_r+0x9c>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d101      	bne.n	80058cc <__swbuf_r+0x78>
 80058c8:	68ac      	ldr	r4, [r5, #8]
 80058ca:	e7d0      	b.n	800586e <__swbuf_r+0x1a>
 80058cc:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <__swbuf_r+0xa0>)
 80058ce:	429c      	cmp	r4, r3
 80058d0:	bf08      	it	eq
 80058d2:	68ec      	ldreq	r4, [r5, #12]
 80058d4:	e7cb      	b.n	800586e <__swbuf_r+0x1a>
 80058d6:	4621      	mov	r1, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 f81f 	bl	800591c <__swsetup_r>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d0cc      	beq.n	800587c <__swbuf_r+0x28>
 80058e2:	f04f 37ff 	mov.w	r7, #4294967295
 80058e6:	4638      	mov	r0, r7
 80058e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ea:	bf00      	nop
 80058ec:	08005e78 	.word	0x08005e78
 80058f0:	08005e98 	.word	0x08005e98
 80058f4:	08005e58 	.word	0x08005e58

080058f8 <_write_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4c07      	ldr	r4, [pc, #28]	; (8005918 <_write_r+0x20>)
 80058fc:	4605      	mov	r5, r0
 80058fe:	4608      	mov	r0, r1
 8005900:	4611      	mov	r1, r2
 8005902:	2200      	movs	r2, #0
 8005904:	6022      	str	r2, [r4, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	f7fb fb7e 	bl	8001008 <_write>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_write_r+0x1e>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	b103      	cbz	r3, 8005916 <_write_r+0x1e>
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	200002b8 	.word	0x200002b8

0800591c <__swsetup_r>:
 800591c:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <__swsetup_r+0xcc>)
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	4606      	mov	r6, r0
 8005924:	460c      	mov	r4, r1
 8005926:	b125      	cbz	r5, 8005932 <__swsetup_r+0x16>
 8005928:	69ab      	ldr	r3, [r5, #24]
 800592a:	b913      	cbnz	r3, 8005932 <__swsetup_r+0x16>
 800592c:	4628      	mov	r0, r5
 800592e:	f7ff fb91 	bl	8005054 <__sinit>
 8005932:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <__swsetup_r+0xd0>)
 8005934:	429c      	cmp	r4, r3
 8005936:	d10f      	bne.n	8005958 <__swsetup_r+0x3c>
 8005938:	686c      	ldr	r4, [r5, #4]
 800593a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593e:	b29a      	uxth	r2, r3
 8005940:	0715      	lsls	r5, r2, #28
 8005942:	d42c      	bmi.n	800599e <__swsetup_r+0x82>
 8005944:	06d0      	lsls	r0, r2, #27
 8005946:	d411      	bmi.n	800596c <__swsetup_r+0x50>
 8005948:	2209      	movs	r2, #9
 800594a:	6032      	str	r2, [r6, #0]
 800594c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005950:	81a3      	strh	r3, [r4, #12]
 8005952:	f04f 30ff 	mov.w	r0, #4294967295
 8005956:	e03e      	b.n	80059d6 <__swsetup_r+0xba>
 8005958:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <__swsetup_r+0xd4>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d101      	bne.n	8005962 <__swsetup_r+0x46>
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	e7eb      	b.n	800593a <__swsetup_r+0x1e>
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <__swsetup_r+0xd8>)
 8005964:	429c      	cmp	r4, r3
 8005966:	bf08      	it	eq
 8005968:	68ec      	ldreq	r4, [r5, #12]
 800596a:	e7e6      	b.n	800593a <__swsetup_r+0x1e>
 800596c:	0751      	lsls	r1, r2, #29
 800596e:	d512      	bpl.n	8005996 <__swsetup_r+0x7a>
 8005970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005972:	b141      	cbz	r1, 8005986 <__swsetup_r+0x6a>
 8005974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005978:	4299      	cmp	r1, r3
 800597a:	d002      	beq.n	8005982 <__swsetup_r+0x66>
 800597c:	4630      	mov	r0, r6
 800597e:	f000 f973 	bl	8005c68 <_free_r>
 8005982:	2300      	movs	r3, #0
 8005984:	6363      	str	r3, [r4, #52]	; 0x34
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	2300      	movs	r3, #0
 8005990:	6063      	str	r3, [r4, #4]
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	f043 0308 	orr.w	r3, r3, #8
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	b94b      	cbnz	r3, 80059b6 <__swsetup_r+0x9a>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ac:	d003      	beq.n	80059b6 <__swsetup_r+0x9a>
 80059ae:	4621      	mov	r1, r4
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f917 	bl	8005be4 <__smakebuf_r>
 80059b6:	89a2      	ldrh	r2, [r4, #12]
 80059b8:	f012 0301 	ands.w	r3, r2, #1
 80059bc:	d00c      	beq.n	80059d8 <__swsetup_r+0xbc>
 80059be:	2300      	movs	r3, #0
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	6963      	ldr	r3, [r4, #20]
 80059c4:	425b      	negs	r3, r3
 80059c6:	61a3      	str	r3, [r4, #24]
 80059c8:	6923      	ldr	r3, [r4, #16]
 80059ca:	b953      	cbnz	r3, 80059e2 <__swsetup_r+0xc6>
 80059cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80059d4:	d1ba      	bne.n	800594c <__swsetup_r+0x30>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	0792      	lsls	r2, r2, #30
 80059da:	bf58      	it	pl
 80059dc:	6963      	ldrpl	r3, [r4, #20]
 80059de:	60a3      	str	r3, [r4, #8]
 80059e0:	e7f2      	b.n	80059c8 <__swsetup_r+0xac>
 80059e2:	2000      	movs	r0, #0
 80059e4:	e7f7      	b.n	80059d6 <__swsetup_r+0xba>
 80059e6:	bf00      	nop
 80059e8:	20000020 	.word	0x20000020
 80059ec:	08005e78 	.word	0x08005e78
 80059f0:	08005e98 	.word	0x08005e98
 80059f4:	08005e58 	.word	0x08005e58

080059f8 <_close_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4c06      	ldr	r4, [pc, #24]	; (8005a14 <_close_r+0x1c>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	4605      	mov	r5, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	f7fb fc19 	bl	800123a <_close>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_close_r+0x1a>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_close_r+0x1a>
 8005a10:	602b      	str	r3, [r5, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	200002b8 	.word	0x200002b8

08005a18 <__sflush_r>:
 8005a18:	898a      	ldrh	r2, [r1, #12]
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	0710      	lsls	r0, r2, #28
 8005a22:	460c      	mov	r4, r1
 8005a24:	d458      	bmi.n	8005ad8 <__sflush_r+0xc0>
 8005a26:	684b      	ldr	r3, [r1, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dc05      	bgt.n	8005a38 <__sflush_r+0x20>
 8005a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	dc02      	bgt.n	8005a38 <__sflush_r+0x20>
 8005a32:	2000      	movs	r0, #0
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a3a:	2e00      	cmp	r6, #0
 8005a3c:	d0f9      	beq.n	8005a32 <__sflush_r+0x1a>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a44:	682f      	ldr	r7, [r5, #0]
 8005a46:	6a21      	ldr	r1, [r4, #32]
 8005a48:	602b      	str	r3, [r5, #0]
 8005a4a:	d032      	beq.n	8005ab2 <__sflush_r+0x9a>
 8005a4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	075a      	lsls	r2, r3, #29
 8005a52:	d505      	bpl.n	8005a60 <__sflush_r+0x48>
 8005a54:	6863      	ldr	r3, [r4, #4]
 8005a56:	1ac0      	subs	r0, r0, r3
 8005a58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a5a:	b10b      	cbz	r3, 8005a60 <__sflush_r+0x48>
 8005a5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a5e:	1ac0      	subs	r0, r0, r3
 8005a60:	2300      	movs	r3, #0
 8005a62:	4602      	mov	r2, r0
 8005a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a66:	6a21      	ldr	r1, [r4, #32]
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b0      	blx	r6
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	d106      	bne.n	8005a80 <__sflush_r+0x68>
 8005a72:	6829      	ldr	r1, [r5, #0]
 8005a74:	291d      	cmp	r1, #29
 8005a76:	d848      	bhi.n	8005b0a <__sflush_r+0xf2>
 8005a78:	4a29      	ldr	r2, [pc, #164]	; (8005b20 <__sflush_r+0x108>)
 8005a7a:	40ca      	lsrs	r2, r1
 8005a7c:	07d6      	lsls	r6, r2, #31
 8005a7e:	d544      	bpl.n	8005b0a <__sflush_r+0xf2>
 8005a80:	2200      	movs	r2, #0
 8005a82:	6062      	str	r2, [r4, #4]
 8005a84:	04d9      	lsls	r1, r3, #19
 8005a86:	6922      	ldr	r2, [r4, #16]
 8005a88:	6022      	str	r2, [r4, #0]
 8005a8a:	d504      	bpl.n	8005a96 <__sflush_r+0x7e>
 8005a8c:	1c42      	adds	r2, r0, #1
 8005a8e:	d101      	bne.n	8005a94 <__sflush_r+0x7c>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	b903      	cbnz	r3, 8005a96 <__sflush_r+0x7e>
 8005a94:	6560      	str	r0, [r4, #84]	; 0x54
 8005a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a98:	602f      	str	r7, [r5, #0]
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d0c9      	beq.n	8005a32 <__sflush_r+0x1a>
 8005a9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aa2:	4299      	cmp	r1, r3
 8005aa4:	d002      	beq.n	8005aac <__sflush_r+0x94>
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 f8de 	bl	8005c68 <_free_r>
 8005aac:	2000      	movs	r0, #0
 8005aae:	6360      	str	r0, [r4, #52]	; 0x34
 8005ab0:	e7c0      	b.n	8005a34 <__sflush_r+0x1c>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b0      	blx	r6
 8005ab8:	1c41      	adds	r1, r0, #1
 8005aba:	d1c8      	bne.n	8005a4e <__sflush_r+0x36>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0c5      	beq.n	8005a4e <__sflush_r+0x36>
 8005ac2:	2b1d      	cmp	r3, #29
 8005ac4:	d001      	beq.n	8005aca <__sflush_r+0xb2>
 8005ac6:	2b16      	cmp	r3, #22
 8005ac8:	d101      	bne.n	8005ace <__sflush_r+0xb6>
 8005aca:	602f      	str	r7, [r5, #0]
 8005acc:	e7b1      	b.n	8005a32 <__sflush_r+0x1a>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	e7ad      	b.n	8005a34 <__sflush_r+0x1c>
 8005ad8:	690f      	ldr	r7, [r1, #16]
 8005ada:	2f00      	cmp	r7, #0
 8005adc:	d0a9      	beq.n	8005a32 <__sflush_r+0x1a>
 8005ade:	0793      	lsls	r3, r2, #30
 8005ae0:	680e      	ldr	r6, [r1, #0]
 8005ae2:	bf08      	it	eq
 8005ae4:	694b      	ldreq	r3, [r1, #20]
 8005ae6:	600f      	str	r7, [r1, #0]
 8005ae8:	bf18      	it	ne
 8005aea:	2300      	movne	r3, #0
 8005aec:	eba6 0807 	sub.w	r8, r6, r7
 8005af0:	608b      	str	r3, [r1, #8]
 8005af2:	f1b8 0f00 	cmp.w	r8, #0
 8005af6:	dd9c      	ble.n	8005a32 <__sflush_r+0x1a>
 8005af8:	4643      	mov	r3, r8
 8005afa:	463a      	mov	r2, r7
 8005afc:	6a21      	ldr	r1, [r4, #32]
 8005afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b0      	blx	r6
 8005b04:	2800      	cmp	r0, #0
 8005b06:	dc06      	bgt.n	8005b16 <__sflush_r+0xfe>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	e78e      	b.n	8005a34 <__sflush_r+0x1c>
 8005b16:	4407      	add	r7, r0
 8005b18:	eba8 0800 	sub.w	r8, r8, r0
 8005b1c:	e7e9      	b.n	8005af2 <__sflush_r+0xda>
 8005b1e:	bf00      	nop
 8005b20:	20400001 	.word	0x20400001

08005b24 <_fflush_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	690b      	ldr	r3, [r1, #16]
 8005b28:	4605      	mov	r5, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	b1db      	cbz	r3, 8005b66 <_fflush_r+0x42>
 8005b2e:	b118      	cbz	r0, 8005b38 <_fflush_r+0x14>
 8005b30:	6983      	ldr	r3, [r0, #24]
 8005b32:	b90b      	cbnz	r3, 8005b38 <_fflush_r+0x14>
 8005b34:	f7ff fa8e 	bl	8005054 <__sinit>
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <_fflush_r+0x48>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d109      	bne.n	8005b52 <_fflush_r+0x2e>
 8005b3e:	686c      	ldr	r4, [r5, #4]
 8005b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b44:	b17b      	cbz	r3, 8005b66 <_fflush_r+0x42>
 8005b46:	4621      	mov	r1, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b4e:	f7ff bf63 	b.w	8005a18 <__sflush_r>
 8005b52:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <_fflush_r+0x4c>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d101      	bne.n	8005b5c <_fflush_r+0x38>
 8005b58:	68ac      	ldr	r4, [r5, #8]
 8005b5a:	e7f1      	b.n	8005b40 <_fflush_r+0x1c>
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <_fflush_r+0x50>)
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	bf08      	it	eq
 8005b62:	68ec      	ldreq	r4, [r5, #12]
 8005b64:	e7ec      	b.n	8005b40 <_fflush_r+0x1c>
 8005b66:	2000      	movs	r0, #0
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
 8005b6a:	bf00      	nop
 8005b6c:	08005e78 	.word	0x08005e78
 8005b70:	08005e98 	.word	0x08005e98
 8005b74:	08005e58 	.word	0x08005e58

08005b78 <_lseek_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4c07      	ldr	r4, [pc, #28]	; (8005b98 <_lseek_r+0x20>)
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	4608      	mov	r0, r1
 8005b80:	4611      	mov	r1, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fb fb7e 	bl	8001288 <_lseek>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_lseek_r+0x1e>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_lseek_r+0x1e>
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200002b8 	.word	0x200002b8

08005b9c <__swhatbuf_r>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	460e      	mov	r6, r1
 8005ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	b096      	sub	sp, #88	; 0x58
 8005ba8:	4614      	mov	r4, r2
 8005baa:	461d      	mov	r5, r3
 8005bac:	da07      	bge.n	8005bbe <__swhatbuf_r+0x22>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	89b3      	ldrh	r3, [r6, #12]
 8005bb4:	061a      	lsls	r2, r3, #24
 8005bb6:	d410      	bmi.n	8005bda <__swhatbuf_r+0x3e>
 8005bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bbc:	e00e      	b.n	8005bdc <__swhatbuf_r+0x40>
 8005bbe:	466a      	mov	r2, sp
 8005bc0:	f000 f8b2 	bl	8005d28 <_fstat_r>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	dbf2      	blt.n	8005bae <__swhatbuf_r+0x12>
 8005bc8:	9a01      	ldr	r2, [sp, #4]
 8005bca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bd2:	425a      	negs	r2, r3
 8005bd4:	415a      	adcs	r2, r3
 8005bd6:	602a      	str	r2, [r5, #0]
 8005bd8:	e7ee      	b.n	8005bb8 <__swhatbuf_r+0x1c>
 8005bda:	2340      	movs	r3, #64	; 0x40
 8005bdc:	2000      	movs	r0, #0
 8005bde:	6023      	str	r3, [r4, #0]
 8005be0:	b016      	add	sp, #88	; 0x58
 8005be2:	bd70      	pop	{r4, r5, r6, pc}

08005be4 <__smakebuf_r>:
 8005be4:	898b      	ldrh	r3, [r1, #12]
 8005be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005be8:	079d      	lsls	r5, r3, #30
 8005bea:	4606      	mov	r6, r0
 8005bec:	460c      	mov	r4, r1
 8005bee:	d507      	bpl.n	8005c00 <__smakebuf_r+0x1c>
 8005bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	6163      	str	r3, [r4, #20]
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
 8005c00:	ab01      	add	r3, sp, #4
 8005c02:	466a      	mov	r2, sp
 8005c04:	f7ff ffca 	bl	8005b9c <__swhatbuf_r>
 8005c08:	9900      	ldr	r1, [sp, #0]
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff faab 	bl	8005168 <_malloc_r>
 8005c12:	b948      	cbnz	r0, 8005c28 <__smakebuf_r+0x44>
 8005c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c18:	059a      	lsls	r2, r3, #22
 8005c1a:	d4ef      	bmi.n	8005bfc <__smakebuf_r+0x18>
 8005c1c:	f023 0303 	bic.w	r3, r3, #3
 8005c20:	f043 0302 	orr.w	r3, r3, #2
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	e7e3      	b.n	8005bf0 <__smakebuf_r+0xc>
 8005c28:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <__smakebuf_r+0x7c>)
 8005c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	6020      	str	r0, [r4, #0]
 8005c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	9b00      	ldr	r3, [sp, #0]
 8005c38:	6163      	str	r3, [r4, #20]
 8005c3a:	9b01      	ldr	r3, [sp, #4]
 8005c3c:	6120      	str	r0, [r4, #16]
 8005c3e:	b15b      	cbz	r3, 8005c58 <__smakebuf_r+0x74>
 8005c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c44:	4630      	mov	r0, r6
 8005c46:	f000 f881 	bl	8005d4c <_isatty_r>
 8005c4a:	b128      	cbz	r0, 8005c58 <__smakebuf_r+0x74>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	431d      	orrs	r5, r3
 8005c5c:	81a5      	strh	r5, [r4, #12]
 8005c5e:	e7cd      	b.n	8005bfc <__smakebuf_r+0x18>
 8005c60:	0800501d 	.word	0x0800501d

08005c64 <__malloc_lock>:
 8005c64:	4770      	bx	lr

08005c66 <__malloc_unlock>:
 8005c66:	4770      	bx	lr

08005c68 <_free_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	d045      	beq.n	8005cfc <_free_r+0x94>
 8005c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c74:	1f0c      	subs	r4, r1, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bfb8      	it	lt
 8005c7a:	18e4      	addlt	r4, r4, r3
 8005c7c:	f7ff fff2 	bl	8005c64 <__malloc_lock>
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <_free_r+0x98>)
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	4610      	mov	r0, r2
 8005c86:	b933      	cbnz	r3, 8005c96 <_free_r+0x2e>
 8005c88:	6063      	str	r3, [r4, #4]
 8005c8a:	6014      	str	r4, [r2, #0]
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c92:	f7ff bfe8 	b.w	8005c66 <__malloc_unlock>
 8005c96:	42a3      	cmp	r3, r4
 8005c98:	d90c      	bls.n	8005cb4 <_free_r+0x4c>
 8005c9a:	6821      	ldr	r1, [r4, #0]
 8005c9c:	1862      	adds	r2, r4, r1
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	bf04      	itt	eq
 8005ca2:	681a      	ldreq	r2, [r3, #0]
 8005ca4:	685b      	ldreq	r3, [r3, #4]
 8005ca6:	6063      	str	r3, [r4, #4]
 8005ca8:	bf04      	itt	eq
 8005caa:	1852      	addeq	r2, r2, r1
 8005cac:	6022      	streq	r2, [r4, #0]
 8005cae:	6004      	str	r4, [r0, #0]
 8005cb0:	e7ec      	b.n	8005c8c <_free_r+0x24>
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	b10a      	cbz	r2, 8005cbc <_free_r+0x54>
 8005cb8:	42a2      	cmp	r2, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x4a>
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	1858      	adds	r0, r3, r1
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x74>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	1858      	adds	r0, r3, r1
 8005cca:	4282      	cmp	r2, r0
 8005ccc:	6019      	str	r1, [r3, #0]
 8005cce:	d1dd      	bne.n	8005c8c <_free_r+0x24>
 8005cd0:	6810      	ldr	r0, [r2, #0]
 8005cd2:	6852      	ldr	r2, [r2, #4]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	4401      	add	r1, r0
 8005cd8:	6019      	str	r1, [r3, #0]
 8005cda:	e7d7      	b.n	8005c8c <_free_r+0x24>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x7c>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	e7d3      	b.n	8005c8c <_free_r+0x24>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428a      	cmp	r2, r1
 8005cea:	bf04      	itt	eq
 8005cec:	6811      	ldreq	r1, [r2, #0]
 8005cee:	6852      	ldreq	r2, [r2, #4]
 8005cf0:	6062      	str	r2, [r4, #4]
 8005cf2:	bf04      	itt	eq
 8005cf4:	1809      	addeq	r1, r1, r0
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	605c      	str	r4, [r3, #4]
 8005cfa:	e7c7      	b.n	8005c8c <_free_r+0x24>
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	bf00      	nop
 8005d00:	200000d8 	.word	0x200000d8

08005d04 <_read_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4c07      	ldr	r4, [pc, #28]	; (8005d24 <_read_r+0x20>)
 8005d08:	4605      	mov	r5, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	6022      	str	r2, [r4, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fb fa74 	bl	8001200 <_read>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_read_r+0x1e>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_read_r+0x1e>
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	200002b8 	.word	0x200002b8

08005d28 <_fstat_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4c07      	ldr	r4, [pc, #28]	; (8005d48 <_fstat_r+0x20>)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4605      	mov	r5, r0
 8005d30:	4608      	mov	r0, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	f7fb fa8c 	bl	8001252 <_fstat>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d102      	bne.n	8005d44 <_fstat_r+0x1c>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	b103      	cbz	r3, 8005d44 <_fstat_r+0x1c>
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	bd38      	pop	{r3, r4, r5, pc}
 8005d46:	bf00      	nop
 8005d48:	200002b8 	.word	0x200002b8

08005d4c <_isatty_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4c06      	ldr	r4, [pc, #24]	; (8005d68 <_isatty_r+0x1c>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4605      	mov	r5, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	f7fb fa8b 	bl	8001272 <_isatty>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d102      	bne.n	8005d66 <_isatty_r+0x1a>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	b103      	cbz	r3, 8005d66 <_isatty_r+0x1a>
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
 8005d68:	200002b8 	.word	0x200002b8

08005d6c <_init>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr

08005d78 <_fini>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr
